(function(){var Ga=Math.imul||function(a,b){var c=a>>16&65535,d=b>>16&65535,e=a&65535,h=b&65535;return e*h+(c*h+e*d<<16)|0};function Ka(){var a=0,b=!1,c=null,d={},e=new Ha,h=e.e.domElement,j=null,i=function(){d={},b=!1},m=function(k){d[k.which]=1,k.which===84?ra(e.h.b):k.which===71?oa(e.j):k.which===70?sa(e.h.b):k.which===79&&ta(e.h.b)},n=function(f){d[f.which]=0},o=function(g){g.ctrlKey||M(e,g.deltaX*-.007853981633974483,g.deltaY*-.007853981633974483),g.preventDefault()},q=function(l){b=!0,l.preventDefault()},p=function(){b=!1},s=function(r){if(b){var w=c?r.pageX-c.pageX:0,u=c?r.pageY-c.pageY:0;M(e,w*.007853981633974483,u*.007853981633974483)}c=r},t=function(){var x=window.devicePixelRatio;Y(e,Math.round(window.innerWidth*x)|0,Math.round(window.innerHeight*x)|0)},v=0;j=function(){if(++v,!(v%2)){var B=window.performance.now(),J=Math.min(.25,(B-a)/1000);a=B;var L=z(d,68,0)-z(d,65,0)|0,K=z(d,83,0)-z(d,87,0)|0;Z(e,L,K,J,z(d,32,0)!=0,z(d,16,0)!=0),_(e,J),document.title=$(e)}window.requestAnimationFrame(j)},t(),j();
var H=document.createElement('div'),A=H.style;A.position='absolute',A.left=A.top='20px',A.padding='13px 15px',A.background='rgba(0, 0, 0, 0.5)',A.color='white',A.pointerEvents='none',A.whiteSpace='pre',A.font='14px/20px sans-serif',A.borderRadius='5px',H.textContent='W/A/S/D: Move\nShift: Move fast\nDrag: Rotate\nT: Toggle textures\nG: Toggle godrays\nF: Toggle fog\nO: Toggle occlusion',document.body.appendChild(h),document.body.appendChild(H),document.onkeydown=m,document.onkeyup=n,window.onblur=i,window.onresize=t,window.onmousedown=q,window.onmouseup=p,window.onmousemove=s,window.onwheel=o}function Y(c,a,b){c.d.setViewOffset(a,b,0,0,a,b),c.d.updateProjectionMatrix(),c.e.setSize(a,b,!1),c.j.i.setSize(a,b)}function Z(i,a,b,c,d,e){i.b.set(0,0,0),e?((a!=0||b!=0)&&(i.b.set(a,0,b).normalize().multiplyScalar(c*20),i.b.applyEuler(i.d.rotation)),i.k=0):((a!=0||b!=0)&&(i.b.set(a,0,b).normalize().multiplyScalar(c*4),i.b.applyAxisAngle(i.a,i.d.rotation.y)),i.k-=c*9.8,i.b.y=i.k*c),Aa(i.h.b,i.i,i.b);var h=za(i.h.b,i.i),j=ya(i.h.b,
i.i);d&&j?i.k=6:(h||j)&&(i.k=0)}function M(d,a,b){var c=d.d.rotation;c.x=Math.min(1.5707963267948966,Math.max(-1.5707963267948966,c.x-b)),c.y-=a,c.y-=Math.floor(c.y/6.283185307179586)*6.283185307179586}function _(c,a){c.m=c.m*.9+.1/a,c.d.position.copy(c.i.a),c.d.position.y+=.4,c.d.updateMatrixWorld(),c.d.matrixWorldInverse.getInverse(c.d.matrixWorld),wa(c.h.b,a,c.d,c.e);var b=c.j.i;c.e.setViewport(0,0,b.width,b.height),c.e.render(c.c,c.d,b),pa(c.j,c.e,c.d)}function $(a){return Math.round(a.m)+' fps/'+Math.round(a.h.b.q)+' units/'+va(a.h.b)+' quads'}function da(e){N(e);for(var a=0;a<6;++a){var b=e.k[a];if(b){var c=(a+3|0)%6;b.k[c].B=!0,b.k[c]=null}}if(e.s){for(var h=0,j=e.s,i=j.length;h<i;++h){var d=j[h];R(e.a.g,d)}e.s=e.r=null,e.w={}}}function N(a){a.t&&(a.b.remove(a.t),a.t=null),a.x&&(a.c.remove(a.x),a.x=null),a.v&&(a.d.remove(a.v),a.v=null),a.u&&(a.u.dispose(),a.u=null)}function ea(a){return a.h>>5&1023|a.j<<5&1047552|a.i<<15&1072693248}function fa(d,a,b,c){return a-=d.h,b-=d.j,c-=d.i,a>-1&&a<32&&b>-1&&b<32&&c>-1&&c<32}
function ga(c,a,b){c.k[b]=a,a.k[(b+3|0)%6]=c,c.B=a.B=!0}function O(d,a,b,c){return fa(d,a,b,c)?d.m[(a-d.h|0)+((b-d.j|0)+(c-d.i<<5)<<5)|0]:0}function C(e,a,b,c){var d=e;return a<d.h&&d.k[0]?d=d.k[0]:a>=(d.h+32|0)&&d.k[3]&&(d=d.k[3]),b<d.j&&d.k[1]?d=d.k[1]:b>=(d.j+32|0)&&d.k[4]&&(d=d.k[4]),c<d.i&&d.k[2]?d=d.k[2]:c>=(d.i+32|0)&&d.k[5]&&(d=d.k[5]),O(d,a,b,c)}function ha(f){if(f.B){N(f),f.s=[],f.r={},f.o=[],f.g=[],f.q=[],f.l=[],f.p=[];for(var a=f.h,q=f.h+33|0;a<q;++a)for(var b=f.j,g=f.j+33|0;b<g;++b)for(var c=f.i,o=f.i+33|0;c<o;++c){var d=Ga(a+Ga(b+Ga(c,33)|0,33)|0,6);if(b<(f.j+32|0)&&c<(f.i+32|0)){var e=C(f,a-1|0,b,c),h=C(f,a,b,c);!e&&h?D(f,a,b+1|0,c+1|0,0,0,-1,0,-1,0,I[h][2],d):e&&!h&&D(f,a,b+1|0,c,0,0,1,0,-1,0,I[e][2],d+1|0)}if(a<(f.h+32|0)&&c<(f.i+32|0)){var j=C(f,a,b-1|0,c),i=C(f,a,b,c);!j&&i?D(f,a,b,c,1,0,0,0,0,1,I[i][1],d+2|0):j&&!i&&D(f,a+1|0,b,c,-1,0,0,0,0,1,I[j][0],d+3|0)}if(a<(f.h+32|0)&&b<(f.j+32|0)){var m=C(f,a,b,c-1|0),k=C(f,a,b,c);!m&&k?D(f,a,b+1|0,c,1,0,0,0,-1,0,I[k][2],d+4|0):m&&!k&&D(f,a+1|0,b+1|0,
c,-1,0,0,0,-1,0,I[m][2],d+5|0)}}for(var l=0,p=W(f.w),s=p.length;l<s;++l){var n=p[l];R(f.a.g,n)}f.w=f.r,f.r=null,f.u=new THREE.BufferGeometry,f.u.setIndex(new THREE.BufferAttribute(new Uint16Array(f.p),1)),f.u.addAttribute('position',new THREE.BufferAttribute(new Float32Array(f.o),3)),f.u.addAttribute('uvs',new THREE.BufferAttribute(new Float32Array(f.g),4)),f.u.addAttribute('updateUV',new THREE.BufferAttribute(new Float32Array(f.q),2)),f.u.addAttribute('updatePosition',new THREE.BufferAttribute(new Float32Array(f.l),3)),f.t=new THREE.Mesh(f.u,f.e),f.x=new THREE.Mesh(f.u,f.a.g.h),f.v=new THREE.Mesh(f.u,f.a.g.j),f.b.add(f.t),f.c.add(f.x),f.d.add(f.v),f.v.frustumCulled=!1,f.o=f.g=null,f.q=f.l=null,f.p=null,f.B=!1}}function D(v,a,b,c,d,e,h,j,i,m,k,n){var f=a+d*.5+j*.5,o=b+e*.5+i*.5,g=c+h*.5+m*.5,q=(1+k%16|0)/16-.0001,l=1-(k/16|0)/16-.0001,p=q-.0625+.0002,s=l-.0625+.0002,r=v.o.length/3|0,w=v.p;w.push(r),w.push(r+1|0),w.push(r+2|0),w.push(r),w.push(r+2|0),w.push(r+3|0);var u=z(v.w,n,-1);~u?delete v.w[n]:u=ka(v.a.g);
var t=v.f,x=v.n;la(v.a.g,u,t),S(v.a.g,u,x),v.s.push(u),v.r[n]=u,E(v,a,b,c,q,l,t.min.x,t.min.y,x.min.x,x.min.y,f,o,g),E(v,a+d|0,b+e|0,c+h|0,p,l,t.max.x,t.min.y,x.max.x,x.min.y,f,o,g),E(v,(a+d|0)+j|0,(b+e|0)+i|0,(c+h|0)+m|0,p,s,t.max.x,t.max.y,x.max.x,x.max.y,f,o,g),E(v,a+j|0,b+i|0,c+m|0,q,s,t.min.x,t.max.y,x.min.x,x.max.y,f,o,g)}function ia(a){return a.s?a.s.length:0}function E(o,a,b,c,d,e,h,j,i,m,k,n,f){o.o.push(a),o.o.push(b),o.o.push(c),o.g.push(d),o.g.push(e),o.g.push(h),o.g.push(j),o.q.push(i),o.q.push(m),o.l.push(k+(a-k)*2),o.l.push(n+(b-n)*2),o.l.push(f+(c-f)*2)}function ja(l){for(var a=l.i,r=l.i+32|0;a<r;++a)for(var b=l.h,s=l.h+32|0;b<s;++b)for(var c=Math.round(35.2+Da(b*.02,a*.02)*16)|0,d=(b-l.h|0)+(a-l.i<<10)|0,e=Math.max(0,l.j),p=Math.min(c,l.j+32|0);e<p;++e){var h=(e+1|0)^c?e<(c-3|0)?3:1:2;l.m[d+(e-l.j<<5)|0]=h}for(var j=0;j<6;++j){var i=63-Ga(j,10)|0;if(i>=l.j&&i<(l.j+32|0))for(var m=l.i,u=l.i+32|0;m<u;++m)for(var k=l.h,w=l.h+32|0;k<w;++k){var n=k*.01,f=m*.01;f/=.866025404,n-=f*.5,j&1&&(n-=1/3),n-=Math.floor(n),
f-=Math.floor(f);var o=1-n-f;o<0&&(n=1-n,f=1-f,o=-o);var g=Math.max(Math.max(n,f),o),q=Math.min(Math.min(n,f),o);!(g>.6966666666666667)&&(!(g<.6366666666666666)||!(q>.03))&&(l.m[(k-l.h|0)+((i-l.j|0)+(m-l.i<<5)<<5)|0]=5)}}l.B=!0}function ka(b){if(b.t==-1)return-1;var a=b.t;return b.t=b.k[a],S(b,a,b.n),Q(b,b.n.min.x,b.n.min.y,b.n.max.x,b.n.min.y,b.n.max.x,b.n.max.y),Q(b,b.n.min.x,b.n.min.y,b.n.max.x,b.n.max.y,b.n.min.x,b.n.max.y),a}function Q(j,a,b,c,d,e,h){j.s.push(a*2-1),j.s.push(b*2-1),j.s.push(0),j.s.push(c*2-1),j.s.push(d*2-1),j.s.push(0),j.s.push(e*2-1),j.s.push(h*2-1),j.s.push(0)}function R(b,a){~a&&(b.k[a]=b.t,b.t=a)}function S(e,a,b){var c=a%e.a|0,d=a/e.a|0;b.min.x=c/e.a,b.min.y=d/e.b,b.max.x=(c+1)/e.a,b.max.y=(d+1)/e.b}function la(e,a,b){var c=a%e.a<<1,d=a/e.a<<1;b.min.x=(c+.5)/(e.a<<1),b.min.y=(d+.5)/(e.b<<1),b.max.x=(c+1.5)/(e.a<<1),b.max.y=(d+1.5)/(e.b<<1)}function ma(g,a,b,c){if(g.u%2){if(a.autoClear=!1,a.setViewport(0,0,g.r.width,g.r.height),g.s.length){var n=new THREE.BufferGeometry;n.addAttribute('position',
new THREE.BufferAttribute(new Float32Array(g.s),3));var f=new THREE.Mesh(n,g.i);f.frustumCulled=!1,g.e.add(f),a.render(g.e,g.p,g.r),g.e.remove(f),g.s=[]}g.j.uniforms.rayLight.value.copy(g.l),g.j.uniforms.previous.value=g.r,a.render(g.d,g.p,g.w),a.autoClear=!0;var o=g.r;g.r=g.w,g.w=o}else{var d=Math.random()*6.283185307179586,e=Math.asin(Math.random()*2-1);g.l.set(Math.cos(d)*Math.cos(e),Math.sin(e),Math.sin(d)*Math.cos(e)),g.l.y=Math.abs(+g.l.y),g.u%6?g.l.multiplyScalar(.1).add(c).normalize():(g.l.y+=1,g.l.normalize()),g.q.set(g.l.y,g.l.z,g.l.x).cross(g.l).normalize(),g.g.copy(g.q).cross(g.l).normalize(),g.f.min.set(Infinity,Infinity,Infinity),g.f.max.set(-Infinity,-Infinity,-Infinity);for(var q=0,l=b.d,p=l.length;q<p;++q)for(var h=l[q],j=0;j<8;++j){var i=h.h+(j&1?32:0),m=h.j+(j&2?32:0),k=h.i+(j&4?32:0);g.o.set(i,m,k),g.o.set(g.o.dot(g.g),g.o.dot(g.q),g.o.dot(g.l)),g.f.expandByPoint(g.o)}g.f.expandByScalar(1),g.p.left=g.f.min.x,g.p.right=g.f.max.x,g.p.bottom=g.f.min.y,g.p.top=g.f.max.y,g.p.near=-g.f.max.z,g.p.far=-g.f.min.z,
g.p.matrix.makeBasis(g.g,g.q,g.l),g.p.matrix.decompose(g.p.position,g.p.quaternion,g.p.scale),g.p.updateProjectionMatrix(),a.setViewport(0,0,g.m.width,g.m.height),a.render(g.c,g.p,g.m)}++g.u}function oa(a){a.m=!a.m}function pa(h,a,b){var c=h.b.uniforms,d=h.a.c.position;h.c.set(d.x,d.y,d.z,0),h.c.applyMatrix4(h.e.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse)),c.uvLight.value.set(h.c.x/h.c.w*.5+.5,h.c.y/h.c.w*.5+.5),c.rayLight.value.copy(d),c.cameraToWorldMatrix.value.multiplyMatrices(b.matrixWorld,h.e.getInverse(b.projectionMatrix)),h.d.set(0,0,1),h.d.applyMatrix4(c.cameraToWorldMatrix.value),h.d.normalize();var e=d.x*h.d.x+d.y*h.d.y+d.z*h.d.z;c.godrayStrength.value=h.m?Math.max(0,Math.pow(Math.max(0,e),4)/2-.1):0,c.randomSeed.value=Math.random(),a.render(h.h,h.j)}function ra(b){var a=b.c.uniforms.renderTextureMap;a.value=!a.value}function sa(b){var a=b.c.uniforms.renderFog;a.value=!a.value}function ta(b){var a=b.c.uniforms.renderOcclusion;a.value=!a.value}function ua(y,a){y.m.setFromMatrix(y.n.multiplyMatrices(a.projectionMatrix,
a.matrixWorldInverse));for(var b=y.q+Math.sqrt(3072)/2,c=a.position,d=Math.floor((c.x-b)/32)|0,e=Math.ceil((c.x+b)/32)|0,h=Math.max(0,Math.floor((c.y-b)/32)|0),j=Math.min(2,Math.ceil((c.y+b)/32)|0),i=Math.floor((c.z-b)/32)|0,m=Math.ceil((c.z+b)/32)|0,k=0;k<y.d.length;){var n=y.d[k];T(c.x,c.y,c.z,n.h+16,n.j+16,n.i+16)>b?(delete y.e[ea(n)],y.d.splice(k,1),da(n)):++k}for(var f=null,o=-Infinity,g=d;g<e;++g)for(var q=g<<5,l=h;l<j;++l)for(var p=l<<5,s=i;s<m;++s){var r=s<<5,w=T(c.x,c.y,c.z,q+16,p+16,r+16);if(!(w>b)){var u=q>>5&1023|p<<5&1047552|r<<15&1072693248,t=z(y.e,u,null);if(!t){t=new Ia(y,y.h,y.j,y.i,y.c,q,p,r),ja(t),y.e[u]=t,y.d.push(t);for(var x=0;x<6;++x){var v=x,B=q+(aa(v)<<5)|0,J=p+(ba(v)<<5)|0,L=r+(ca(v)<<5)|0,K=z(y.e,B>>5&1023|J<<5&1047552|L<<15&1072693248,null);K&&ga(t,K,v)}y.k.min.set(q,p,r),y.k.max.set(q+32|0,p+32|0,r+32|0)}if(t.B){var H=y.m.intersectsBox(y.k),A=H?y.q-w:-w;A>o&&(f=t,o=A)}}}f&&ha(f)}function va(c){for(var a=0,d=0,e=c.d,h=e.length;d<h;++d){var b=e[d];a+=ia(b)}return a}function wa(e,a,b,c){
e.l=e.l*.95+.05/a,e.q=Math.max(64,Math.min(128,e.q+(e.l-25)*a)),ua(e,b);var d=e.c.uniforms;d.drawDistance.value=e.q,d.randomSeed.value=Math.random(),d.rayLight.value.copy(e.a.c.position),d.renderOcclusion.value&&ma(e.g,c,e,e.a.c.position)}function xa(h,a,b,c){var d=(a&-32)>>5&1023|(b&-32)<<5&1047552|(c&-32)<<15&1072693248,e=z(h.e,d,null);return e?O(e,a,b,c):0}function ya(d,a){var b=d.f.copy(a.a).sub(a.b).floor(),c=d.o.copy(a.a).add(a.b).ceil();return a.a.y-a.b.y-b.y<.01&&!F(d,b.x,c.x+1,b.y-1,b.y-1,b.z,c.z+1)}function za(d,a){var b=d.f.copy(a.a).sub(a.b).floor(),c=d.o.copy(a.a).add(a.b).ceil();return c.y-a.a.y-a.b.y<.01&&!F(d,b.x,c.x+1,c.y,c.y,b.z,c.z+1)}function F(k,a,b,c,d,e,h){for(var j=a,o=b+1|0;j<o;++j)for(var i=c,f=d+1|0;i<f;++i)for(var m=e,n=h+1|0;m<n;++m)if(xa(k,j,i,m))return!1;return!0}function Aa(c,a,b){b.y>0&&G(c,a,1,b.y),G(c,a,0,b.x),G(c,a,2,b.z),b.y<0&&G(c,a,1,b.y)}function G(f,a,b,c){if(c!=0){var d=f.f.copy(a.a).sub(a.b).floor(),e=f.o.copy(a.a).add(a.b).ceil(),h=a.a.getComponent(b),j=a.b.getComponent(b);
if(c<0){for(var i=Math.floor(h-j+c)|0,m=Math.floor(h-j-1)|0;m>=i;--m)if(!F(f,b?d.x:m,b?e.x-1:m,b^1?d.y:m,b^1?e.y-1:m,b^2?d.z:m,b^2?e.z-1:m)){a.a.setComponent(b,(m+1|0)+j+.0001);return}}else if(c>0)for(var k=Math.ceil(h+j+c-1)|0,n=Math.ceil(h+j)|0;n<=k;++n)if(!F(f,b?d.x:n,b?e.x-1:n,b^1?d.y:n,b^1?e.y-1:n,b^2?d.z:n,b^2?e.z-1:n)){a.a.setComponent(b,n-j-.0001);return}a.a.setComponent(b,h+c)}}function T(a,b,c,d,e,h){return a-=d,b-=e,c-=h,Math.sqrt(a*a+b*b+c*c)}function Ba(a,b){var c=a+Ga(b,57)|0;return c=c<<13^c,1-(Ga(c,Ga(Ga(c,c),15731)+789221|0)+1376312589&2147483647)*(1/1073741824)}function U(a){return a*a*(3-a*2)}function Ca(a,b){for(var c=Math.floor(a)|0,d=Math.floor(b)|0,e=U(a-c),h=U(b-d),j=0,i=0;i<4;++i){var m=i&1,k=i>>1&1;j+=Ba(c+m|0,d+k|0)*(m?e:1-e)*(k?h:1-h)}return j}function Da(a,b){for(var c=0,d=1,e=0;e<3;++e)c+=Ca(a,b)*d,d*=.5,a*=2,b*=2;return c}function z(d,a,b){var c=d[a];return c!==void 0?c:b}function W(c){var a=[];for(var b in c)a.push(c[b]);return a}function aa(a){return a?a^3?0:1:-1}function ba(a){
return a^1?a^4?0:1:-1}function ca(a){return a^2?a^5?0:1:-1}function Ha(){this.a=new THREE.Vector3(0,1,0),this.b=new THREE.Vector3,this.c=new THREE.Scene,this.d=new THREE.PerspectiveCamera(75,1,.1,1000),this.e=new THREE.WebGLRenderer,this.h=this.j=null,this.i=new Na,this.m=this.k=0,this.h=new Oa(this.c),this.j=new La(this.h),this.i.a.y=50,this.i.b.set(.4,.8,.4),this.d.rotation.order='YXZ',this.e.setClearColor(0,0),this.e.gammaInput=this.e.gammaOutput=!0}function Ia(a,b,c,d,e,h,j,i){this.a=a,this.b=b,this.c=c,this.d=d,this.e=e,this.h=h,this.j=j,this.i=i,this.m=new Uint8Array(32768),this.k=[null,null,null,null,null,null],this.n=new THREE.Box2,this.f=new THREE.Box2,this.o=this.g=null,this.q=this.l=null,this.p=this.s=null,this.r=null,this.w={},this.u=this.t=null,this.x=this.v=null,this.B=!1}function Ja(a,b){this.a=this.b=0,this.c=new THREE.Scene,this.d=new THREE.Scene,this.e=new THREE.Scene,this.h=this.j=null,this.i=this.m=null,this.k=null,this.n=new THREE.Box2,this.f=new THREE.Box3,this.o=new THREE.Vector3,this.g=new THREE.Vector3,
this.q=new THREE.Vector3,this.l=new THREE.Vector3,this.p=new THREE.OrthographicCamera(0,1,0,1,0,1),this.s=[],this.r=this.w=null,this.u=this.t=0,this.a=a,this.b=b,this.r=new THREE.WebGLRenderTarget(a<<1,b<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.r.texture.generateMipmaps=!1,this.w=new THREE.WebGLRenderTarget(a<<1,b<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.w.texture.generateMipmaps=!1,this.m=new THREE.WebGLRenderTarget(1024,1024,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBFormat}),this.m.texture.generateMipmaps=!1;var c=THREE.UniformsUtils.merge([THREE.UniformsLib.common]);this.h=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        varying vec4 position_;\n\n        void main() {\n          position_ = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          gl_Position = position_;\n        }\n      ',fragmentShader:'\n        varying vec4 position_;\n\n        void main() {\n          float depth = position_.z / position_.w * 0.5 + 0.5;\n          vec3 v = fract(depth * vec3(1.0, 256.0, 65536.0));\n          v = floor(v * 256.0) / 256.0;\n          gl_FragColor = vec4(v, 1.0);\n        }\n      '}),
c=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{previous:{type:'t',value:null}},{rayLight:{type:'v3',value:new THREE.Vector3}}]),c.map.value=this.m,this.j=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        attribute vec2 updateUV;\n        attribute vec3 updatePosition;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          updateUV_ = updateUV;\n          worldPosition = updatePosition;\n          clipPosition = projectionMatrix * modelViewMatrix * vec4(updatePosition, 1.0);\n          gl_Position = vec4(updateUV * 2.0 - 1.0, 0.0, 1.0);\n        }\n      ',fragmentShader:'\n        uniform sampler2D map;\n        uniform sampler2D previous;\n        uniform vec3 rayLight;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          vec3 position = clipPosition.xyz / clipPosition.w * 0.5 + 0.5;\n          vec3 encoded = texture2D(map, position.xy).rgb;\n          float depth = dot(encoded, vec3(1.0, 1.0 / 256.0, 1.0 / 65536.0));\n          vec3 normal = normalize(cross(dFdx(worldPosition), dFdy(worldPosition)));\n          float visibility = float(depth + 1.0 / 512.0 > position.z) * max(0.0, dot(rayLight, normal));\n\n          float accumulationFactor = 1.0 / 64.0;\n          vec4 previous8 = texture2D(previous, updateUV_);\n          vec2 previous16 = vec2(\n            dot(previous8.rg, vec2(1.0, 1.0 / 256.0)),\n            dot(previous8.ba, vec2(1.0, 1.0 / 256.0)));\n          vec2 next16 = mix(previous16, vec2(1.0 - visibility, 1.0), accumulationFactor);\n          vec4 next8 = fract(vec4(next16.x * vec2(1.0, 256.0), next16.y * vec2(1.0, 256.0)));\n          next8 = floor(next8 * 256.0) / 256.0;\n          gl_FragColor = next8;\n        }\n      ',
derivatives:!0}),c=THREE.UniformsUtils.merge([THREE.UniformsLib.common]),this.i=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      ',fragmentShader:'\n        void main() {\n          gl_FragColor = vec4(0.0);\n        }\n      '});var d=Ga(a,b);this.k=new Int32Array(d);for(var e=0;e<d;++e)this.k[e]=(e+1|0)^d?e+1|0:-1}function La(a){this.a=this.b=null,this.c=new THREE.Vector4,this.d=new THREE.Vector3,this.e=new THREE.Matrix4,this.h=new THREE.Scene,this.j=new THREE.OrthographicCamera(0,1,0,1,0,1),this.i=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.m=!0,this.a=a;var b=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{cameraToWorldMatrix:{type:'m4',value:new THREE.Matrix4}},{clearColor:{type:'c',value:a.d}},{uvLight:{type:'v3',value:new THREE.Vector3}},{rayLight:{type:'v3',value:new THREE.Vector3}},{randomSeed:{type:'f',
value:0}},{godrayStrength:{type:'f',value:0}}]);b.map.value=this.i,this.i.texture.generateMipmaps=!1,this.b=new THREE.ShaderMaterial({uniforms:b,vertexShader:[THREE.ShaderChunk.uv_pars_vertex,'\n        uniform mat4 cameraToWorldMatrix;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        void main() {\n          vec4 projected = cameraToWorldMatrix * vec4(position.xy, 1.0, 1.0);\n          uv_ = uv;\n          ray_ = projected.xyz / projected.w;\n          gl_Position = vec4(position, 1.0);\n        }\n        '].join('\n'),fragmentShader:[THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.map_pars_fragment,'\n        uniform sampler2D map;\n        uniform float randomSeed;\n        uniform vec3 clearColor;\n        uniform vec3 rayLight;\n        uniform vec3 uvLight;\n        uniform float godrayStrength;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        float lightMagnitude(vec3 ray) {\n          float falloff = max(0.0, dot(rayLight, normalize(ray)));\n          return pow(falloff, 4.0);\n        }\n\n        float godray() {\n          if (godrayStrength == 0.0) {\n            return 0.0;\n          }\n\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          vec3 deltaRayX = dFdx(ray_) / dFdx(uv_).x;\n          vec3 deltaRayY = dFdy(ray_) / dFdy(uv_).y;\n          const int count = 12;\n          float alpha = 0.0;\n\n          for (int i = 0; i < count; i++) {\n            float t = (float(i) + random) / float(count);\n            vec2 uv = mix(uv_, uvLight.xy, t * 0.5);\n            vec3 ray = ray_ +\n              deltaRayX * (uv.x - uv_.x) +\n              deltaRayY * (uv.y - uv_.y);\n            float magnitude = lightMagnitude(ray);\n\n            if (magnitude != 0.0) {\n              float occlusion = 1.0 - texture2D(map, uv).a;\n              float falloff = 1.0 - t;\n              alpha += occlusion * falloff;\n            }\n          }\n\n          // The integral of (1.0 - t) from 0 to 1 is 0.5\n          alpha *= 2.0;\n\n          return alpha * godrayStrength / float(count);\n        }\n\n        void main() {\n          vec4 color = texture2D(map, uv_);\n          vec3 backgroundColor = mix(clearColor, vec3(1.0), lightMagnitude(ray_));\n          color.rgb = mix(backgroundColor, color.rgb, color.a);\n          color.rgb += godray();\n          gl_FragColor = color;\n        }\n        '].join('\n'),
derivatives:!0}),this.h.add(new THREE.Mesh(new THREE.PlaneGeometry(2,2,1,1),this.b))}function Ma(a){this.a=this.b=null,this.c=null,this.d=[],this.e={},this.h=new THREE.Group,this.j=new THREE.Group,this.i=new THREE.Group,this.m=new THREE.Frustum,this.k=new THREE.Box3,this.n=new THREE.Matrix4,this.f=new THREE.Vector3,this.o=new THREE.Vector3,this.g=new Ja(1024,1024),this.q=96,this.l=60,this.a=a,this.b=new THREE.TextureLoader().load('terrain.png'),this.b.minFilter=this.b.magFilter=THREE.NearestFilter;var b=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{lightmap:{type:'t',value:null}},{rayLight:{type:'v3',value:new THREE.Vector3}},{clearColor:{type:'c',value:a.d}},{drawDistance:{type:'f',value:0}},{randomSeed:{type:'f',value:0}},{renderTextureMap:{type:'i',value:!0}},{renderFog:{type:'i',value:!0}},{renderOcclusion:{type:'i',value:!0}}]);b.map.value=this.b,b.lightmap.value=this.g.r,this.c=new THREE.ShaderMaterial({uniforms:b,vertexShader:'\n        attribute vec4 uvs;\n        varying vec3 worldSpacePosition;\n        varying vec3 cameraSpacePosition;\n        varying vec4 uvs_;\n\n        void main() {\n          worldSpacePosition = position;\n          vec4 transformed = modelViewMatrix * vec4(position, 1.0);\n          cameraSpacePosition = transformed.xyz / transformed.w;\n          uvs_ = uvs;\n          gl_Position = projectionMatrix * transformed;\n        }\n      ',
fragmentShader:[THREE.ShaderChunk.common,'\n        uniform bool renderTextureMap;\n        uniform bool renderFog;\n        uniform bool renderOcclusion;\n        uniform sampler2D map;\n        uniform sampler2D lightmap;\n        uniform float randomSeed;\n        uniform vec3 rayLight;\n        uniform vec3 clearColor;\n        uniform float drawDistance;\n        varying vec3 worldSpacePosition;\n        varying vec3 cameraSpacePosition;\n        varying vec4 uvs_;\n\n        void main() {\n          // Occlusion\n          float occlusion;\n          if (renderOcclusion) {\n            vec4 sample = texture2D(lightmap, uvs_.zw);\n            occlusion = 1.0 -\n              dot(sample.rg, vec2(1.0, 1.0 / 256.0)) /\n              dot(sample.ba, vec2(1.0, 1.0 / 256.0));\n            occlusion = 0.01 + 0.99 * occlusion;\n          } else {\n            vec3 normal = normalize(cross(dFdx(worldSpacePosition), dFdy(worldSpacePosition)));\n            occlusion = 0.1 + 0.9 * max(0.0, dot(rayLight, normal));\n          }\n\n          // Terrain\n          vec3 color = renderTextureMap ? inputToLinear(texture2D(map, uvs_.xy).rgb) * occlusion : vec3(occlusion);\n          if (renderFog) {\n            float fade = max(0.0, 1.0 - length(cameraSpacePosition) / drawDistance);\n            color = mix(inputToLinear(clearColor), color, 1.0 - exp(fade * fade * -5.541263545158676));\n          }\n\n          // Finalize\n          color = linearToOutput(color);\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          color += (random - 0.5) / 255.0;\n          gl_FragColor = vec4(color, 1.0);\n        }\n        '].join('\n'),
derivatives:!0}),a.a.add(this.h),this.g.c.add(this.j),this.g.d.add(this.i),this.i.frustumCulled=!1}function Na(){this.a=new THREE.Vector3,this.b=new THREE.Vector3}function Oa(a){this.a=this.b=null,this.c=new THREE.DirectionalLight(16777215,1),this.d=new THREE.Color(13426158),this.a=a,this.c.position.set(1,3,2),this.c.position.normalize(),a.add(this.c),this.b=new Ma(this)}var I=[[0,0,0],[2,2,2],[0,2,3],[1,1,1],[66,2,68],[6,6,5]];Ka()})();
