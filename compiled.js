(function(){var Ha=Math.imul||function(b,a){var c=b>>16&65535,d=a>>16&65535,e=b&65535,g=a&65535;return e*g+(c*g+e*d<<16)|0};function La(){var b=0,a=!1,c=null,d={},e=new Ia,g=e.e.domElement,i=null,h=function(){d={},a=!1},m=function(k){d[k.which]=1,k.which===84?sa(e.g.a):k.which===71?pa(e.i):k.which===70?ta(e.g.a):k.which===79&&ua(e.g.a)},j=function(o){d[o.which]=0},n=function(f){f.ctrlKey||M(e,f.deltaX*-.007853981633974483,f.deltaY*-.007853981633974483),f.preventDefault()},p=function(l){a=!0,l.preventDefault()},q=function(){a=!1},t=function(r){if(a){var w=c?r.pageX-c.pageX:0,u=c?r.pageY-c.pageY:0;M(e,w*.007853981633974483,u*.007853981633974483)}c=r},s=function(){var x=window.devicePixelRatio;Y(e,Math.round(window.innerWidth*x)|0,Math.round(window.innerHeight*x)|0)},v=0;i=function(){if(++v,!(v%2)){var B=window.performance.now(),J=Math.min(.25,(B-b)/1000);b=B;var L=z(d,68,0)-z(d,65,0)|0,K=z(d,83,0)-z(d,87,0)|0;Z(e,L,K,J,z(d,32,0)!=0,z(d,16,0)!=0),_(e,J),document.title=$(e)}window.requestAnimationFrame(i)},s(),i();
var H=document.createElement('div'),A=H.style;A.position='absolute',A.left=A.top='20px',A.padding='13px 15px',A.background='rgba(0, 0, 0, 0.5)',A.color='white',A.pointerEvents='none',A.whiteSpace='pre',A.font='14px/20px sans-serif',A.borderRadius='5px',H.textContent='W/A/S/D: Move\nShift: Move fast\nDrag: Rotate\nT: Toggle textures\nG: Toggle godrays\nF: Toggle fog\nO: Toggle occlusion',document.body.appendChild(g),document.body.appendChild(H),document.onkeydown=m,document.onkeyup=j,window.onblur=h,window.onresize=s,window.onmousedown=p,window.onmouseup=q,window.onmousemove=t,window.onwheel=n}function Y(c,b,a){c.d.setViewOffset(b,a,0,0,b,a),c.d.updateProjectionMatrix(),c.e.setSize(b,a,!1),c.i.h.setSize(b,a)}function Z(h,b,a,c,d,e){h.a.set(0,0,0),e?((b!=0||a!=0)&&(h.a.set(b,0,a).normalize().multiplyScalar(c*20),h.a.applyEuler(h.d.rotation)),h.k=0):((b!=0||a!=0)&&(h.a.set(b,0,a).normalize().multiplyScalar(c*4),h.a.applyAxisAngle(h.b,h.d.rotation.y)),h.k-=c*9.8,h.a.y=h.k*c),Ba(h.g.a,h.h,h.a);var g=Aa(h.g.a,h.h),i=za(h.g.a,
h.h);d&&i?h.k=6:(g||i)&&(h.k=0)}function M(d,b,a){var c=d.d.rotation;c.x=Math.min(1.5707963267948966,Math.max(-1.5707963267948966,c.x-a)),c.y-=b,c.y-=Math.floor(c.y/6.283185307179586)*6.283185307179586}function _(c,b){c.m=c.m*.9+.1/b,c.d.position.copy(c.h.b),c.d.position.y+=.4,c.d.updateMatrixWorld(),c.d.matrixWorldInverse.getInverse(c.d.matrixWorld),xa(c.g.a,b,c.d,c.e);var a=c.i.h;c.e.setViewport(0,0,a.width,a.height),c.e.render(c.c,c.d,a),qa(c.i,c.e,c.d)}function $(b){return Math.round(b.m)+' fps/'+Math.round(b.g.a.p)+' units/'+wa(b.g.a)+' quads'}function da(e){N(e);for(var b=0;b<6;++b){var a=e.k[b];if(a){var c=(b+3|0)%6;a.k[c].B=!0,a.k[c]=null}}if(e.t){for(var g=0,i=e.t,h=i.length;g<h;++g){var d=i[g];R(e.b.f,d)}e.t=e.r=null,e.w={}}}function N(b){b.s&&(b.a.remove(b.s),b.s=null),b.x&&(b.c.remove(b.x),b.x=null),b.v&&(b.d.remove(b.v),b.v=null),b.u&&(b.u.dispose(),b.u=null)}function ea(b){return b.g>>5&1023|b.i<<5&1047552|b.h<<15&1072693248}function fa(d,b,a,c){return b-=d.g,a-=d.i,c-=d.h,b>-1&&b<32&&a>-1&&a<32&&c>-1&&c<32}
function ga(c,b,a){c.k[a]=b,b.k[(a+3|0)%6]=c,c.B=b.B=!0}function O(d,b,a,c){return fa(d,b,a,c)?d.m[(b-d.g|0)+((a-d.i|0)+(c-d.h<<5)<<5)|0]:0}function C(e,b,a,c){var d=e;return b<d.g&&d.k[0]?d=d.k[0]:b>=(d.g+32|0)&&d.k[3]&&(d=d.k[3]),a<d.i&&d.k[1]?d=d.k[1]:a>=(d.i+32|0)&&d.k[4]&&(d=d.k[4]),c<d.h&&d.k[2]?d=d.k[2]:c>=(d.h+32|0)&&d.k[5]&&(d=d.k[5]),O(d,b,a,c)}function ha(a){if(a.B){N(a),a.t=[],a.r={},a.n=[],a.f=[],a.p=[],a.l=[],a.q=[],ia(a);for(var c=0,d=W(a.w),e=d.length;c<e;++c){var b=d[c];R(a.b.f,b)}a.w=a.r,a.r=null,a.u=new THREE.BufferGeometry,a.u.setIndex(new THREE.BufferAttribute(new Uint16Array(a.q),1)),a.u.addAttribute('position',new THREE.BufferAttribute(new Float32Array(a.n),3)),a.u.addAttribute('uvs',new THREE.BufferAttribute(new Float32Array(a.f),4)),a.u.addAttribute('updateUV',new THREE.BufferAttribute(new Float32Array(a.p),2)),a.u.addAttribute('updatePosition',new THREE.BufferAttribute(new Float32Array(a.l),3)),a.s=new THREE.Mesh(a.u,a.e),a.x=new THREE.Mesh(a.u,a.b.f.g),a.v=new THREE.Mesh(a.u,a.b.f.i),
a.a.add(a.s),a.c.add(a.x),a.d.add(a.v),a.v.frustumCulled=!1,a.n=a.f=null,a.p=a.l=null,a.q=null,a.B=!1}}function ia(j){for(var b=j.g,f=j.g+33|0;b<f;++b)for(var a=j.i,n=j.i+33|0;a<n;++a)for(var c=j.h,o=j.h+33|0;c<o;++c){var d=Ha(b+Ha(a+Ha(c,33)|0,33)|0,6);if(a<(j.i+32|0)&&c<(j.h+32|0)){var e=C(j,b-1|0,a,c),g=C(j,b,a,c);!e&&g?D(j,b,a+1|0,c+1|0,0,0,-1,0,-1,0,I[g][2],d):e&&!g&&D(j,b,a+1|0,c,0,0,1,0,-1,0,I[e][2],d+1|0)}if(b<(j.g+32|0)&&c<(j.h+32|0)){var i=C(j,b,a-1|0,c),h=C(j,b,a,c);!i&&h?D(j,b,a,c,1,0,0,0,0,1,I[h][1],d+2|0):i&&!h&&D(j,b+1|0,a,c,-1,0,0,0,0,1,I[i][0],d+3|0)}if(b<(j.g+32|0)&&a<(j.i+32|0)){var m=C(j,b,a,c-1|0),k=C(j,b,a,c);!m&&k?D(j,b,a+1|0,c,1,0,0,0,-1,0,I[k][2],d+4|0):m&&!k&&D(j,b+1|0,a+1|0,c,-1,0,0,0,-1,0,I[m][2],d+5|0)}}}function D(v,b,a,c,d,e,g,i,h,m,k,j){var o=b+d*.5+i*.5,n=a+e*.5+h*.5,f=c+g*.5+m*.5,p=(1+k%16|0)/16-.0001,l=1-(k/16|0)/16-.0001,q=p-.0625+.0002,t=l-.0625+.0002,r=v.n.length/3|0,w=v.q;w.push(r),w.push(r+1|0),w.push(r+2|0),w.push(r),w.push(r+2|0),w.push(r+3|0);var u=z(v.w,j,-1);~u?delete v.w[j]:u=la(v.b.f);
var s=v.o,x=v.j;ma(v.b.f,u,s),S(v.b.f,u,x),v.t.push(u),v.r[j]=u,E(v,b,a,c,p,l,s.min.x,s.min.y,x.min.x,x.min.y,o,n,f),E(v,b+d|0,a+e|0,c+g|0,q,l,s.max.x,s.min.y,x.max.x,x.min.y,o,n,f),E(v,(b+d|0)+i|0,(a+e|0)+h|0,(c+g|0)+m|0,q,t,s.max.x,s.max.y,x.max.x,x.max.y,o,n,f),E(v,b+i|0,a+h|0,c+m|0,p,t,s.min.x,s.max.y,x.min.x,x.max.y,o,n,f)}function ja(b){return b.t?b.t.length:0}function E(n,b,a,c,d,e,g,i,h,m,k,j,o){n.n.push(b),n.n.push(a),n.n.push(c),n.f.push(d),n.f.push(e),n.f.push(g),n.f.push(i),n.p.push(h),n.p.push(m),n.l.push(k+(b-k)*2),n.l.push(j+(a-j)*2),n.l.push(o+(c-o)*2)}function ka(l){for(var b=l.h,r=l.h+32|0;b<r;++b)for(var a=l.g,t=l.g+32|0;a<t;++a)for(var c=Math.round(35.2+Ea(a*.02,b*.02)*16)|0,d=(a-l.g|0)+(b-l.h<<10)|0,e=Math.max(0,l.i),q=Math.min(c,l.i+32|0);e<q;++e){var g=(e+1|0)^c?e<(c-3|0)?3:1:2;l.m[d+(e-l.i<<5)|0]=g}for(var i=0;i<6;++i){var h=63-Ha(i,10)|0;if(h>=l.i&&h<(l.i+32|0))for(var m=l.h,u=l.h+32|0;m<u;++m)for(var k=l.g,w=l.g+32|0;k<w;++k){var j=k*.01,o=m*.01;o/=.866025404,j-=o*.5,i&1&&(j-=1/3),j-=Math.floor(j),
o-=Math.floor(o);var n=1-j-o;n<0&&(j=1-j,o=1-o,n=-n);var f=Math.max(Math.max(j,o),n),p=Math.min(Math.min(j,o),n);!(f>.6966666666666667)&&(!(f<.6366666666666666)||!(p>.03))&&(l.m[(k-l.g|0)+((h-l.i|0)+(m-l.h<<5)<<5)|0]=5)}}l.B=!0}function la(a){if(a.s==-1)return-1;var b=a.s;return a.s=a.k[b],S(a,b,a.j),Q(a,a.j.min.x,a.j.min.y,a.j.max.x,a.j.min.y,a.j.max.x,a.j.max.y),Q(a,a.j.min.x,a.j.min.y,a.j.max.x,a.j.max.y,a.j.min.x,a.j.max.y),b}function Q(i,b,a,c,d,e,g){i.t.push(b*2-1),i.t.push(a*2-1),i.t.push(0),i.t.push(c*2-1),i.t.push(d*2-1),i.t.push(0),i.t.push(e*2-1),i.t.push(g*2-1),i.t.push(0)}function R(a,b){~b&&(a.k[b]=a.s,a.s=b)}function S(e,b,a){var c=b%e.b|0,d=b/e.b|0;a.min.x=c/e.b,a.min.y=d/e.a,a.max.x=(c+1)/e.b,a.max.y=(d+1)/e.a}function ma(e,b,a){var c=b%e.b<<1,d=b/e.b<<1;a.min.x=(c+.5)/(e.b<<1),a.min.y=(d+.5)/(e.a<<1),a.max.x=(c+1.5)/(e.b<<1),a.max.y=(d+1.5)/(e.a<<1)}function na(f,b,a,c){if(f.u%2){if(b.autoClear=!1,b.setViewport(0,0,f.r.width,f.r.height),f.t.length){var j=new THREE.BufferGeometry;j.addAttribute('position',
new THREE.BufferAttribute(new Float32Array(f.t),3));var o=new THREE.Mesh(j,f.h);o.frustumCulled=!1,f.e.add(o),b.render(f.e,f.q,f.r),f.e.remove(o),f.t=[]}f.i.uniforms.rayLight.value.copy(f.l),f.i.uniforms.previous.value=f.r,b.render(f.d,f.q,f.w),b.autoClear=!0;var n=f.r;f.r=f.w,f.w=n}else{var d=Math.random()*6.283185307179586,e=Math.asin(Math.random()*2-1);f.l.set(Math.cos(d)*Math.cos(e),Math.sin(e),Math.sin(d)*Math.cos(e)),f.l.y=Math.abs(+f.l.y),f.u%6?f.l.multiplyScalar(.1).add(c).normalize():(f.l.y+=1,f.l.normalize()),f.p.set(f.l.y,f.l.z,f.l.x).cross(f.l).normalize(),f.f.copy(f.p).cross(f.l).normalize(),f.o.min.set(Infinity,Infinity,Infinity),f.o.max.set(-Infinity,-Infinity,-Infinity);for(var p=0,l=a.d,q=l.length;p<q;++p)for(var g=l[p],i=0;i<8;++i){var h=g.g+(i&1?32:0),m=g.i+(i&2?32:0),k=g.h+(i&4?32:0);f.n.set(h,m,k),f.n.set(f.n.dot(f.f),f.n.dot(f.p),f.n.dot(f.l)),f.o.expandByPoint(f.n)}f.o.expandByScalar(1),f.q.left=f.o.min.x,f.q.right=f.o.max.x,f.q.bottom=f.o.min.y,f.q.top=f.o.max.y,f.q.near=-f.o.max.z,f.q.far=-f.o.min.z,
f.q.matrix.makeBasis(f.f,f.p,f.l),f.q.matrix.decompose(f.q.position,f.q.quaternion,f.q.scale),f.q.updateProjectionMatrix(),b.setViewport(0,0,f.m.width,f.m.height),b.render(f.c,f.q,f.m)}++f.u}function pa(b){b.m=!b.m}function qa(g,b,a){var c=g.a.uniforms,d=g.b.c.position;g.c.set(d.x,d.y,d.z,0),g.c.applyMatrix4(g.e.multiplyMatrices(a.projectionMatrix,a.matrixWorldInverse)),c.uvLight.value.set(g.c.x/g.c.w*.5+.5,g.c.y/g.c.w*.5+.5),c.rayLight.value.copy(d),c.cameraToWorldMatrix.value.multiplyMatrices(a.matrixWorld,g.e.getInverse(a.projectionMatrix)),g.d.set(0,0,1),g.d.applyMatrix4(c.cameraToWorldMatrix.value),g.d.normalize();var e=d.x*g.d.x+d.y*g.d.y+d.z*g.d.z;c.godrayStrength.value=g.m?Math.max(0,Math.pow(Math.max(0,e),4)/2-.1):0,c.randomSeed.value=Math.random(),b.render(g.g,g.i)}function sa(a){var b=a.c.uniforms.renderTextureMap;b.value=!b.value}function ta(a){var b=a.c.uniforms.renderFog;b.value=!b.value}function ua(a){var b=a.c.uniforms.renderOcclusion;b.value=!b.value}function va(y,b){y.m.setFromMatrix(y.j.multiplyMatrices(b.projectionMatrix,
b.matrixWorldInverse));for(var a=y.p+Math.sqrt(3072)/2,c=b.position,d=Math.floor((c.x-a)/32)|0,e=Math.ceil((c.x+a)/32)|0,g=Math.max(0,Math.floor((c.y-a)/32)|0),i=Math.min(2,Math.ceil((c.y+a)/32)|0),h=Math.floor((c.z-a)/32)|0,m=Math.ceil((c.z+a)/32)|0,k=0;k<y.d.length;){var j=y.d[k];T(c.x,c.y,c.z,j.g+16,j.i+16,j.h+16)>a?(delete y.e[ea(j)],y.d.splice(k,1),da(j)):++k}for(var o=null,n=-Infinity,f=d;f<e;++f)for(var p=f<<5,l=g;l<i;++l)for(var q=l<<5,t=h;t<m;++t){var r=t<<5,w=T(c.x,c.y,c.z,p+16,q+16,r+16);if(!(w>a)){var u=p>>5&1023|q<<5&1047552|r<<15&1072693248,s=z(y.e,u,null);if(!s){s=new Ja(y,y.g,y.i,y.h,y.c,p,q,r),ka(s),y.e[u]=s,y.d.push(s);for(var x=0;x<6;++x){var v=x,B=p+(aa(v)<<5)|0,J=q+(ba(v)<<5)|0,L=r+(ca(v)<<5)|0,K=z(y.e,B>>5&1023|J<<5&1047552|L<<15&1072693248,null);K&&ga(s,K,v)}y.k.min.set(p,q,r),y.k.max.set(p+32|0,q+32|0,r+32|0)}if(s.B){var H=y.m.intersectsBox(y.k),A=H?y.p-w:-w;A>n&&(o=s,n=A)}}}o&&ha(o)}function wa(c){for(var b=0,d=0,e=c.d,g=e.length;d<g;++d){var a=e[d];b+=ja(a)}return b}function xa(e,b,a,c){
e.l=e.l*.95+.05/b,e.p=Math.max(64,Math.min(128,e.p+(e.l-25)*b)),va(e,a);var d=e.c.uniforms;d.drawDistance.value=e.p,d.randomSeed.value=Math.random(),d.rayLight.value.copy(e.b.c.position),d.renderOcclusion.value&&na(e.f,c,e,e.b.c.position)}function ya(g,b,a,c){var d=(b&-32)>>5&1023|(a&-32)<<5&1047552|(c&-32)<<15&1072693248,e=z(g.e,d,null);return e?O(e,b,a,c):0}function za(d,b){var a=d.o.copy(b.b).sub(b.a).floor(),c=d.n.copy(b.b).add(b.a).ceil();return b.b.y-b.a.y-a.y<.01&&!F(d,a.x,c.x+1,a.y-1,a.y-1,a.z,c.z+1)}function Aa(d,b){var a=d.o.copy(b.b).sub(b.a).floor(),c=d.n.copy(b.b).add(b.a).ceil();return c.y-b.b.y-b.a.y<.01&&!F(d,a.x,c.x+1,c.y,c.y,a.z,c.z+1)}function F(k,b,a,c,d,e,g){for(var i=b,n=a+1|0;i<n;++i)for(var h=c,o=d+1|0;h<o;++h)for(var m=e,j=g+1|0;m<j;++m)if(ya(k,i,h,m))return!1;return!0}function Ba(c,b,a){a.y>0&&G(c,b,1,a.y),G(c,b,0,a.x),G(c,b,2,a.z),a.y<0&&G(c,b,1,a.y)}function G(o,b,a,c){if(c!=0){var d=o.o.copy(b.b).sub(b.a).floor(),e=o.n.copy(b.b).add(b.a).ceil(),g=b.b.getComponent(a),i=b.a.getComponent(a);
if(c<0){for(var h=Math.floor(g-i+c)|0,m=Math.floor(g-i-1)|0;m>=h;--m)if(!F(o,a?d.x:m,a?e.x-1:m,a^1?d.y:m,a^1?e.y-1:m,a^2?d.z:m,a^2?e.z-1:m)){b.b.setComponent(a,(m+1|0)+i+.0001);return}}else if(c>0)for(var k=Math.ceil(g+i+c-1)|0,j=Math.ceil(g+i)|0;j<=k;++j)if(!F(o,a?d.x:j,a?e.x-1:j,a^1?d.y:j,a^1?e.y-1:j,a^2?d.z:j,a^2?e.z-1:j)){b.b.setComponent(a,j-i-.0001);return}b.b.setComponent(a,g+c)}}function T(b,a,c,d,e,g){return b-=d,a-=e,c-=g,Math.sqrt(b*b+a*a+c*c)}function Ca(b,a){var c=b+Ha(a,57)|0;return c=c<<13^c,1-(Ha(c,Ha(Ha(c,c),15731)+789221|0)+1376312589&2147483647)*(1/1073741824)}function U(b){return b*b*(3-b*2)}function Da(b,a){for(var c=Math.floor(b)|0,d=Math.floor(a)|0,e=U(b-c),g=U(a-d),i=0,h=0;h<4;++h){var m=h&1,k=h>>1&1;i+=Ca(c+m|0,d+k|0)*(m?e:1-e)*(k?g:1-g)}return i}function Ea(b,a){for(var c=0,d=1,e=0;e<3;++e)c+=Da(b,a)*d,d*=.5,b*=2,a*=2;return c}function z(d,b,a){var c=d[b];return c!==void 0?c:a}function W(c){var b=[];for(var a in c)b.push(c[a]);return b}function aa(b){return b?b^3?0:1:-1}function ba(b){
return b^1?b^4?0:1:-1}function ca(b){return b^2?b^5?0:1:-1}function Ia(){this.b=new THREE.Vector3(0,1,0),this.a=new THREE.Vector3,this.c=new THREE.Scene,this.d=new THREE.PerspectiveCamera(75,1,.1,1000),this.e=new THREE.WebGLRenderer,this.g=this.i=null,this.h=new Oa,this.m=this.k=0,this.g=new Pa(this.c),this.i=new Ma(this.g),this.h.b.y=50,this.h.a.set(.4,.8,.4),this.d.rotation.order='YXZ',this.e.setClearColor(0,0),this.e.gammaInput=this.e.gammaOutput=!0}function Ja(b,a,c,d,e,g,i,h){this.b=b,this.a=a,this.c=c,this.d=d,this.e=e,this.g=g,this.i=i,this.h=h,this.m=new Uint8Array(32768),this.k=[null,null,null,null,null,null],this.j=new THREE.Box2,this.o=new THREE.Box2,this.n=this.f=null,this.p=this.l=null,this.q=this.t=null,this.r=null,this.w={},this.u=this.s=null,this.x=this.v=null,this.B=!1}function Ka(b,a){this.b=this.a=0,this.c=new THREE.Scene,this.d=new THREE.Scene,this.e=new THREE.Scene,this.g=this.i=null,this.h=this.m=null,this.k=null,this.j=new THREE.Box2,this.o=new THREE.Box3,this.n=new THREE.Vector3,this.f=new THREE.Vector3,
this.p=new THREE.Vector3,this.l=new THREE.Vector3,this.q=new THREE.OrthographicCamera(0,1,0,1,0,1),this.t=[],this.r=this.w=null,this.u=this.s=0,this.b=b,this.a=a,this.r=new THREE.WebGLRenderTarget(b<<1,a<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.r.texture.generateMipmaps=!1,this.w=new THREE.WebGLRenderTarget(b<<1,a<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.w.texture.generateMipmaps=!1,this.m=new THREE.WebGLRenderTarget(1024,1024,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBFormat}),this.m.texture.generateMipmaps=!1;var c=THREE.UniformsUtils.merge([THREE.UniformsLib.common]);this.g=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        varying vec4 position_;\n\n        void main() {\n          position_ = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          gl_Position = position_;\n        }\n      ',fragmentShader:'\n        varying vec4 position_;\n\n        void main() {\n          float depth = position_.z / position_.w * 0.5 + 0.5;\n          vec3 v = fract(depth * vec3(1.0, 256.0, 65536.0));\n          v = floor(v * 256.0) / 256.0;\n          gl_FragColor = vec4(v, 1.0);\n        }\n      '}),
c=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{previous:{type:'t',value:null}},{rayLight:{type:'v3',value:new THREE.Vector3}}]),c.map.value=this.m,this.i=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        attribute vec2 updateUV;\n        attribute vec3 updatePosition;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          updateUV_ = updateUV;\n          worldPosition = updatePosition;\n          clipPosition = projectionMatrix * modelViewMatrix * vec4(updatePosition, 1.0);\n          gl_Position = vec4(updateUV * 2.0 - 1.0, 0.0, 1.0);\n        }\n      ',fragmentShader:'\n        uniform sampler2D map;\n        uniform sampler2D previous;\n        uniform vec3 rayLight;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          vec3 position = clipPosition.xyz / clipPosition.w * 0.5 + 0.5;\n          vec3 encoded = texture2D(map, position.xy).rgb;\n          float depth = dot(encoded, vec3(1.0, 1.0 / 256.0, 1.0 / 65536.0));\n          vec3 normal = normalize(cross(dFdx(worldPosition), dFdy(worldPosition)));\n          float visibility = float(depth + 1.0 / 512.0 > position.z) * max(0.0, dot(rayLight, normal));\n\n          float accumulationFactor = 1.0 / 64.0;\n          vec4 previous8 = texture2D(previous, updateUV_);\n          vec2 previous16 = vec2(\n            dot(previous8.rg, vec2(1.0, 1.0 / 256.0)),\n            dot(previous8.ba, vec2(1.0, 1.0 / 256.0)));\n          vec2 next16 = mix(previous16, vec2(1.0 - visibility, 1.0), accumulationFactor);\n          vec4 next8 = fract(vec4(next16.x * vec2(1.0, 256.0), next16.y * vec2(1.0, 256.0)));\n          next8 = floor(next8 * 256.0) / 256.0;\n          gl_FragColor = next8;\n        }\n      ',
derivatives:!0}),c=THREE.UniformsUtils.merge([THREE.UniformsLib.common]),this.h=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      ',fragmentShader:'\n        void main() {\n          gl_FragColor = vec4(0.0);\n        }\n      '});var d=Ha(b,a);this.k=new Int32Array(d);for(var e=0;e<d;++e)this.k[e]=(e+1|0)^d?e+1|0:-1}function Ma(b){this.b=this.a=null,this.c=new THREE.Vector4,this.d=new THREE.Vector3,this.e=new THREE.Matrix4,this.g=new THREE.Scene,this.i=new THREE.OrthographicCamera(0,1,0,1,0,1),this.h=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.m=!0,this.b=b;var a=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{cameraToWorldMatrix:{type:'m4',value:new THREE.Matrix4}},{clearColor:{type:'c',value:b.d}},{uvLight:{type:'v3',value:new THREE.Vector3}},{rayLight:{type:'v3',value:new THREE.Vector3}},{randomSeed:{type:'f',
value:0}},{godrayStrength:{type:'f',value:0}}]);a.map.value=this.h,this.h.texture.generateMipmaps=!1,this.a=new THREE.ShaderMaterial({uniforms:a,vertexShader:[THREE.ShaderChunk.uv_pars_vertex,'\n        uniform mat4 cameraToWorldMatrix;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        void main() {\n          vec4 projected = cameraToWorldMatrix * vec4(position.xy, 1.0, 1.0);\n          uv_ = uv;\n          ray_ = projected.xyz / projected.w;\n          gl_Position = vec4(position, 1.0);\n        }\n        '].join('\n'),fragmentShader:[THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.map_pars_fragment,'\n        uniform sampler2D map;\n        uniform float randomSeed;\n        uniform vec3 clearColor;\n        uniform vec3 rayLight;\n        uniform vec3 uvLight;\n        uniform float godrayStrength;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        float lightMagnitude(vec3 ray) {\n          float falloff = max(0.0, dot(rayLight, normalize(ray)));\n          return pow(falloff, 4.0);\n        }\n\n        float godray() {\n          if (godrayStrength == 0.0) {\n            return 0.0;\n          }\n\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          vec3 deltaRayX = dFdx(ray_) / dFdx(uv_).x;\n          vec3 deltaRayY = dFdy(ray_) / dFdy(uv_).y;\n          const int count = 12;\n          float alpha = 0.0;\n\n          for (int i = 0; i < count; i++) {\n            float t = (float(i) + random) / float(count);\n            vec2 uv = mix(uv_, uvLight.xy, t * 0.5);\n            vec3 ray = ray_ +\n              deltaRayX * (uv.x - uv_.x) +\n              deltaRayY * (uv.y - uv_.y);\n            float magnitude = lightMagnitude(ray);\n\n            if (magnitude != 0.0) {\n              float occlusion = 1.0 - texture2D(map, uv).a;\n              float falloff = 1.0 - t;\n              alpha += occlusion * falloff;\n            }\n          }\n\n          // The integral of (1.0 - t) from 0 to 1 is 0.5\n          alpha *= 2.0;\n\n          return alpha * godrayStrength / float(count);\n        }\n\n        void main() {\n          vec4 color = texture2D(map, uv_);\n          vec3 backgroundColor = mix(clearColor, vec3(1.0), lightMagnitude(ray_));\n          color.rgb = mix(backgroundColor, color.rgb, color.a);\n          color.rgb += godray();\n          gl_FragColor = color;\n        }\n        '].join('\n'),
derivatives:!0}),this.g.add(new THREE.Mesh(new THREE.PlaneGeometry(2,2,1,1),this.a))}function Na(b){this.b=this.a=null,this.c=null,this.d=[],this.e={},this.g=new THREE.Group,this.i=new THREE.Group,this.h=new THREE.Group,this.m=new THREE.Frustum,this.k=new THREE.Box3,this.j=new THREE.Matrix4,this.o=new THREE.Vector3,this.n=new THREE.Vector3,this.f=new Ka(1024,1024),this.p=96,this.l=60,this.b=b,this.a=new THREE.TextureLoader().load('terrain.png'),this.a.minFilter=this.a.magFilter=THREE.NearestFilter;var a=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{lightmap:{type:'t',value:null}},{rayLight:{type:'v3',value:new THREE.Vector3}},{clearColor:{type:'c',value:b.d}},{drawDistance:{type:'f',value:0}},{randomSeed:{type:'f',value:0}},{renderTextureMap:{type:'i',value:!0}},{renderFog:{type:'i',value:!0}},{renderOcclusion:{type:'i',value:!0}}]);a.map.value=this.a,a.lightmap.value=this.f.r,this.c=new THREE.ShaderMaterial({uniforms:a,vertexShader:'\n        attribute vec4 uvs;\n        varying vec3 worldSpacePosition;\n        varying vec3 cameraSpacePosition;\n        varying vec4 uvs_;\n\n        void main() {\n          worldSpacePosition = position;\n          vec4 transformed = modelViewMatrix * vec4(position, 1.0);\n          cameraSpacePosition = transformed.xyz / transformed.w;\n          uvs_ = uvs;\n          gl_Position = projectionMatrix * transformed;\n        }\n      ',
fragmentShader:[THREE.ShaderChunk.common,'\n        uniform bool renderTextureMap;\n        uniform bool renderFog;\n        uniform bool renderOcclusion;\n        uniform sampler2D map;\n        uniform sampler2D lightmap;\n        uniform float randomSeed;\n        uniform vec3 rayLight;\n        uniform vec3 clearColor;\n        uniform float drawDistance;\n        varying vec3 worldSpacePosition;\n        varying vec3 cameraSpacePosition;\n        varying vec4 uvs_;\n\n        void main() {\n          // Occlusion\n          float occlusion;\n          if (renderOcclusion) {\n            vec4 sample = texture2D(lightmap, uvs_.zw);\n            occlusion = 1.0 -\n              dot(sample.rg, vec2(1.0, 1.0 / 256.0)) /\n              dot(sample.ba, vec2(1.0, 1.0 / 256.0));\n            occlusion = 0.01 + 0.99 * occlusion;\n          } else {\n            vec3 normal = normalize(cross(dFdx(worldSpacePosition), dFdy(worldSpacePosition)));\n            occlusion = 0.1 + 0.9 * max(0.0, dot(rayLight, normal));\n          }\n\n          // Terrain\n          vec3 color = renderTextureMap ? inputToLinear(texture2D(map, uvs_.xy).rgb) * occlusion : vec3(occlusion);\n          if (renderFog) {\n            float fade = max(0.0, 1.0 - length(cameraSpacePosition) / drawDistance);\n            color = mix(inputToLinear(clearColor), color, 1.0 - exp(fade * fade * -5.541263545158676));\n          }\n\n          // Finalize\n          color = linearToOutput(color);\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          color += (random - 0.5) / 255.0;\n          gl_FragColor = vec4(color, 1.0);\n        }\n        '].join('\n'),
derivatives:!0}),b.b.add(this.g),this.f.c.add(this.i),this.f.d.add(this.h),this.h.frustumCulled=!1}function Oa(){this.b=new THREE.Vector3,this.a=new THREE.Vector3}function Pa(b){this.b=this.a=null,this.c=new THREE.DirectionalLight(16777215,1),this.d=new THREE.Color(13426158),this.b=b,this.c.position.set(1,3,2),this.c.position.normalize(),b.add(this.c),this.a=new Na(this)}var I=[[0,0,0],[2,2,2],[0,2,3],[1,1,1],[66,2,68],[6,6,5]];La()})();
