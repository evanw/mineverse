(function(){var Da=Math.imul||function(b,c){var a=b>>16&65535,d=c>>16&65535,g=b&65535,h=c&65535;return g*h+(a*h+g*d<<16)|0};function Ha(){var b=0,c=!1,a=null,d={},g=new Ea,h=g.d.domElement,i=!0,j=!0,n=!0,m=null,l=function(){d={},c=!1},e=function(o){d[o.which]=1,o.which===84?i=!i:o.which===71?j=!j:o.which===70&&(n=!n)},f=function(q){d[q.which]=0},k=function(p){p.ctrlKey?M(g,0,p.deltaY*.1):N(g,p.deltaX*-.007853981633974483,p.deltaY*-.007853981633974483),p.preventDefault()},r=function(t){c=!0,t.preventDefault()},w=function(){c=!1},u=function(s){if(c){var y=a?s.pageX-a.pageX:0,v=a?s.pageY-a.pageY:0;N(g,y*.007853981633974483,v*.007853981633974483)}a=s},A=function(){var J=window.devicePixelRatio;$(g,Math.round(window.innerWidth*J)|0,Math.round(window.innerHeight*J)|0)},K=0;m=function(){if(++K,!(K%2)){var F=window.performance.now(),L=Math.min(.25,(F-b)/1000);b=F;var G=(4+(z(d,16,0)<<4)|0)*L,x=(z(d,68,0)-z(d,65,0)|0)*G,pa=(z(d,83,0)-z(d,87,0)|0)*G;M(g,x,pa),g.g.c.a.uniforms.renderTextureMap.value=i,g.h.n=j,g.g.c.a.uniforms.renderFog.value=n,
aa(g,L),document.title=ba(g)}window.requestAnimationFrame(m)},A(),m();var U=document.createElement('div'),D=U.style;D.position='absolute',D.left=D.top='20px',D.padding='13px 15px',D.background='rgba(0, 0, 0, 0.5)',D.color='white',D.pointerEvents='none',D.whiteSpace='pre',D.font='14px/20px sans-serif',D.borderRadius='5px',U.textContent='W/A/S/D: Move\nShift: Move fast\nDrag: Rotate\nT: Toggle textures\nG: Toggle godrays\nF: Toggle fog',document.body.appendChild(h),document.body.appendChild(U),document.onkeydown=e,document.onkeyup=f,window.onblur=l,window.onresize=A,window.onmousedown=r,window.onmouseup=w,window.onmousemove=u,window.onwheel=k}function $(a,b,c){a.a.setViewOffset(b,c,0,0,b,c),a.a.updateProjectionMatrix(),a.d.setSize(b,c,!1),a.h.j.setSize(b,c)}function M(a,b,c){(b!=0||c!=0)&&(a.b.set(b,0,c),a.b.applyEuler(a.a.rotation),xa(a.g.c,a.i,a.b))}function N(d,b,c){var a=d.a.rotation;a.x=Math.min(1.5707963267948966,Math.max(-1.5707963267948966,a.x-c)),a.y-=b,a.y-=Math.floor(a.y/6.283185307179586)*6.283185307179586}
function aa(a,b){a.j=a.j*.9+.1/b,a.a.position.copy(a.i.b),a.a.updateMatrixWorld(),a.a.matrixWorldInverse.getInverse(a.a.matrixWorld),va(a.g.c,b,a.a),oa(a.g.c.f,a.d,a.g.c,a.g.a);var c=a.h.j;a.d.setViewport(0,0,c.width,c.height),a.d.render(a.c,a.a,c),ra(a.h,a.d,a.a)}function ba(b){return Math.round(b.j)+' fps/'+Math.round(b.g.c.q)+' units/'+ua(b.g.c)+' quads'}function fa(g){O(g);for(var b=0;b<6;++b){var c=g.m[b];if(c){var a=(b+3|0)%6;c.m[a].A=!0,c.m[a]=null}}if(g.r){for(var h=0,i=g.r,j=i.length;h<j;++h){var d=i[h];S(g.b.f,d)}g.r=g.t=null,g.w={}}}function O(b){b.s&&(b.c.remove(b.s),b.s=null),b.y&&(b.a.remove(b.y),b.y=null),b.v&&(b.d.remove(b.v),b.v=null),b.u&&(b.u.dispose(),b.u=null)}function ga(b){return b.h>>5&1023|b.i<<5&1047552|b.j<<15&1072693248}function ha(d,b,c,a){return b-=d.h,c-=d.i,a-=d.j,b>-1&&b<32&&c>-1&&c<32&&a>-1&&a<32}function ia(a,b,c){a.m[c]=b,b.m[(c+3|0)%6]=a,a.A=b.A=!0}function P(d,b,c,a){return ha(d,b,c,a)?d.n[(b-d.h|0)+((c-d.i|0)+(a-d.j<<5)<<5)|0]:0}function B(g,b,c,a){var d=g;return b<d.h&&d.m[0]?d=d.m[0]:b>=(d.h+32|0)&&d.m[3]&&(d=d.m[3]),
c<d.i&&d.m[1]?d=d.m[1]:c>=(d.i+32|0)&&d.m[4]&&(d=d.m[4]),a<d.j&&d.m[2]?d=d.m[2]:a>=(d.j+32|0)&&d.m[5]&&(d=d.m[5]),P(d,b,c,a)}function ja(e){if(e.A){O(e),e.r=[],e.t={},e.o=[],e.f=[],e.q=[],e.k=[],e.p=[];for(var b=e.h,q=e.h+33|0;b<q;++b)for(var c=e.i,f=e.i+33|0;c<f;++c)for(var a=e.j,o=e.j+33|0;a<o;++a){var d=Da(b+Da(c+Da(a,33)|0,33)|0,6);if(c<(e.i+32|0)&&a<(e.j+32|0)){var g=B(e,b-1|0,c,a),h=B(e,b,c,a);!g&&h?C(e,b,c+1|0,a+1|0,0,0,-1,0,-1,0,H[h][2],d):g&&!h&&C(e,b,c+1|0,a,0,0,1,0,-1,0,H[g][2],d+1|0)}if(b<(e.h+32|0)&&a<(e.j+32|0)){var i=B(e,b,c-1|0,a),j=B(e,b,c,a);!i&&j?C(e,b,c,a,1,0,0,0,0,1,H[j][1],d+2|0):i&&!j&&C(e,b+1|0,c,a,-1,0,0,0,0,1,H[i][0],d+3|0)}if(b<(e.h+32|0)&&c<(e.i+32|0)){var n=B(e,b,c,a-1|0),m=B(e,b,c,a);!n&&m?C(e,b,c+1|0,a,1,0,0,0,-1,0,H[m][2],d+4|0):n&&!m&&C(e,b+1|0,c+1|0,a,-1,0,0,0,-1,0,H[n][2],d+5|0)}}for(var k=0,p=Z(e.w),r=p.length;k<r;++k){var l=p[k];S(e.b.f,l)}e.w=e.t,e.t=null,e.u=new THREE.BufferGeometry,e.u.setIndex(new THREE.BufferAttribute(new Uint16Array(e.p),1)),e.u.addAttribute('position',
new THREE.BufferAttribute(new Float32Array(e.o),3)),e.u.addAttribute('uvs',new THREE.BufferAttribute(new Float32Array(e.f),4)),e.u.addAttribute('updateUV',new THREE.BufferAttribute(new Float32Array(e.q),2)),e.u.addAttribute('updatePosition',new THREE.BufferAttribute(new Float32Array(e.k),3)),e.s=new THREE.Mesh(e.u,e.g),e.y=new THREE.Mesh(e.u,e.b.f.h),e.v=new THREE.Mesh(e.u,e.b.f.i),e.c.add(e.s),e.a.add(e.y),e.d.add(e.v),e.v.frustumCulled=!1,e.o=e.f=null,e.q=e.k=null,e.p=null,e.A=!1}}function C(v,b,c,a,d,g,h,i,j,n,m,l){var e=b+d*.5+i*.5,o=c+g*.5+j*.5,f=a+h*.5+n*.5,q=(1+m%16|0)/16-.0001,k=1-(m/16|0)/16-.0001,p=q-.0625+.0002,r=k-.0625+.0002,t=v.o.length/3|0,w=v.p;w.push(t),w.push(t+1|0),w.push(t+2|0),w.push(t),w.push(t+2|0),w.push(t+3|0);var u=z(v.w,l,-1);~u?delete v.w[l]:u=ma(v.b.f);var s=v.e,y=v.l;na(v.b.f,u,s),T(v.b.f,u,y),v.r.push(u),v.t[l]=u,E(v,b,c,a,q,k,s.min.x,s.min.y,y.min.x,y.min.y,e,o,f),E(v,b+d|0,c+g|0,a+h|0,p,k,s.max.x,s.min.y,y.max.x,y.min.y,e,o,f),E(v,(b+d|0)+i|0,(c+g|0)+j|0,(a+h|0)+n|0,p,r,s.max.x,
s.max.y,y.max.x,y.max.y,e,o,f),E(v,b+i|0,c+j|0,a+n|0,q,r,s.min.x,s.max.y,y.min.x,y.max.y,e,o,f)}function ka(b){return b.r?b.r.length:0}function E(o,b,c,a,d,g,h,i,j,n,m,l,e){o.o.push(b),o.o.push(c),o.o.push(a),o.f.push(d),o.f.push(g),o.f.push(h),o.f.push(i),o.q.push(j),o.q.push(n),o.k.push(m+(b-m)*2),o.k.push(l+(c-l)*2),o.k.push(e+(a-e)*2)}function la(k){for(var b=k.j,t=k.j+32|0;b<t;++b)for(var c=k.h,r=k.h+32|0;c<r;++c)for(var a=Math.round(35.2+Aa(c*.02,b*.02)*16)|0,d=(c-k.h|0)+(b-k.j<<5<<5)|0,g=Math.max(0,k.i),p=Math.min(a,k.i+32|0);g<p;++g){var h=(g+1|0)^a?g<(a-3|0)?3:1:2;k.n[d+(g-k.i<<5)|0]=h}for(var i=0;i<6;++i){var j=63-Da(i,10)|0;if(j>=k.i&&j<(k.i+32|0))for(var n=k.j,u=k.j+32|0;n<u;++n)for(var m=k.h,w=k.h+32|0;m<w;++m){var l=m*.01,e=n*.01;e/=.866025404,l-=e*.5,i&1&&(l-=1/3),l-=Math.floor(l),e-=Math.floor(e);var o=1-l-e;o<0&&(l=1-l,e=1-e,o=-o);var f=Math.max(Math.max(l,e),o),q=Math.min(Math.min(l,e),o);!(f>.6966666666666667)&&(!(f<.6366666666666666)||!(q>.03))&&(k.n[(m-k.h|0)+((j-k.i|0)+(n-k.j<<5)<<5)|0]=5)}}
k.A=!0}function ma(c){if(c.s==-1)return-1;var b=c.s;return c.s=c.m[b],T(c,b,c.l),R(c,c.l.min.x,c.l.min.y,c.l.max.x,c.l.min.y,c.l.max.x,c.l.max.y),R(c,c.l.min.x,c.l.min.y,c.l.max.x,c.l.max.y,c.l.min.x,c.l.max.y),b}function R(i,b,c,a,d,g,h){i.r.push(b*2-1),i.r.push(c*2-1),i.r.push(0),i.r.push(a*2-1),i.r.push(d*2-1),i.r.push(0),i.r.push(g*2-1),i.r.push(h*2-1),i.r.push(0)}function S(c,b){~b&&(c.m[b]=c.s,c.s=b)}function T(g,b,c){var a=b%g.b|0,d=b/g.b|0;c.min.x=a/g.b,c.min.y=d/g.c,c.max.x=(a+1)/g.b,c.max.y=(d+1)/g.c}function na(g,b,c){var a=b%g.b<<1,d=b/g.b<<1;c.min.x=(a+.5)/(g.b<<1),c.min.y=(d+.5)/(g.c<<1),c.max.x=(a+1.5)/(g.b<<1),c.max.y=(d+1.5)/(g.c<<1)}function oa(f,b,c,a){if(f.u%2){if(b.autoClear=!1,b.setViewport(0,0,f.t.width,f.t.height),f.r.length){var l=new THREE.BufferGeometry;l.addAttribute('position',new THREE.BufferAttribute(new Float32Array(f.r),3));var e=new THREE.Mesh(l,f.j);e.frustumCulled=!1,f.g.add(e),b.render(f.g,f.p,f.t),f.g.remove(e),f.r=[]}f.i.uniforms.rayLight.value.copy(f.k),f.i.uniforms.previous.value=f.t,
b.render(f.d,f.p,f.w),b.autoClear=!0;var o=f.t;f.t=f.w,f.w=o}else{var d=Math.random()*6.283185307179586,g=Math.asin(Math.random()*2-1);f.k.set(Math.cos(d)*Math.cos(g),Math.sin(g),Math.sin(d)*Math.cos(g)),f.k.y=Math.abs(+f.k.y),f.u%6?f.k.multiplyScalar(.1).add(a.position).normalize():(f.k.y+=1,f.k.normalize()),f.q.set(f.k.y,f.k.z,f.k.x).cross(f.k).normalize(),f.f.copy(f.q).cross(f.k).normalize(),f.e.min.set(Infinity,Infinity,Infinity),f.e.max.set(-Infinity,-Infinity,-Infinity);for(var q=0,k=c.d,p=k.length;q<p;++q)for(var h=k[q],i=0;i<8;++i){var j=h.h+(i&1?32:0),n=h.i+(i&2?32:0),m=h.j+(i&4?32:0);f.o.set(j,n,m),f.o.set(f.o.dot(f.f),f.o.dot(f.q),f.o.dot(f.k)),f.e.expandByPoint(f.o)}f.e.expandByScalar(1),f.p.left=f.e.min.x,f.p.right=f.e.max.x,f.p.bottom=f.e.min.y,f.p.top=f.e.max.y,f.p.near=-f.e.max.z,f.p.far=-f.e.min.z,f.p.matrix.makeBasis(f.f,f.q,f.k),f.p.matrix.decompose(f.p.position,f.p.quaternion,f.p.scale),f.p.updateProjectionMatrix(),b.setViewport(0,0,f.n.width,f.n.height),b.render(f.a,f.p,f.n)}++f.u}function ra(h,b,c){
var a=h.c.uniforms,d=h.b.a.position;h.a.set(d.x,d.y,d.z,0),h.a.applyMatrix4(h.g.multiplyMatrices(c.projectionMatrix,c.matrixWorldInverse)),a.uvLight.value.set(h.a.x/h.a.w*.5+.5,h.a.y/h.a.w*.5+.5),a.rayLight.value.copy(d),a.cameraToWorldMatrix.value.multiplyMatrices(c.matrixWorld,h.g.getInverse(c.projectionMatrix)),h.d.set(0,0,1),h.d.applyMatrix4(a.cameraToWorldMatrix.value),h.d.normalize();var g=d.x*h.d.x+d.y*h.d.y+d.z*h.d.z;a.godrayStrength.value=h.n?Math.max(0,Math.pow(Math.max(0,g),4)/2-.1):0,a.randomSeed.value=Math.random(),b.render(h.h,h.i)}function ta(x,b){x.n.setFromMatrix(x.l.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse));for(var c=x.q+Math.sqrt(3072)/2,a=b.position,d=Math.floor((a.x-c)/32)|0,g=Math.ceil((a.x+c)/32)|0,h=Math.max(0,Math.floor((a.y-c)/32)|0),i=Math.min(2,Math.ceil((a.y+c)/32)|0),j=Math.floor((a.z-c)/32)|0,n=Math.ceil((a.z+c)/32)|0,m=0;m<x.d.length;){var l=x.d[m];W(a.x,a.y,a.z,l.h+16,l.i+16,l.j+16)>c?(delete x.g[ga(l)],x.d.splice(m,1),fa(l)):++m}for(var e=null,o=-Infinity,f=d;f<g;++f)for(var q=f<<5,k=h;k<i;++k)for(var p=k<<5,r=j;r<n;++r){
var t=r<<5,w=W(a.x,a.y,a.z,q+16,p+16,t+16);if(!(w>c)){var u=q>>5&1023|p<<5&1047552|t<<15&1072693248,s=z(x.g,u,null);if(!s){s=new Fa(x,x.h,x.i,x.j,x.a,q,p,t),la(s),x.g[u]=s,x.d.push(s);for(var y=0;y<6;++y){var v=y,A=q+(ca(v)<<5)|0,J=p+(da(v)<<5)|0,K=t+(ea(v)<<5)|0,F=z(x.g,A>>5&1023|J<<5&1047552|K<<15&1072693248,null);F&&ia(s,F,v)}x.m.min.set(q,p,t),x.m.max.set(q+32|0,p+32|0,t+32|0)}if(s.A){var L=x.n.intersectsBox(x.m),G=L?x.q-w:-w;G>o&&(e=s,o=G)}}}e&&ja(e)}function ua(a){for(var b=0,d=0,g=a.d,h=g.length;d<h;++d){var c=g[d];b+=ka(c)}return b}function va(a,b,c){a.k=a.k*.95+.05/b,a.q=Math.max(64,Math.min(128,a.q+(a.k-25)*b)),ta(a,c),a.a.uniforms.drawDistance.value=a.q,a.a.uniforms.randomSeed.value=Math.random()}function wa(h,b,c,a){var d=(b&-32)>>5&1023|(c&-32)<<5&1047552|(a&-32)<<15&1072693248,g=z(h.g,d,null);return g?P(g,b,c,a):0}function V(m,b,c,a,d,g,h){for(var i=b,o=c+1|0;i<o;++i)for(var j=a,e=d+1|0;j<e;++j)for(var n=g,l=h+1|0;n<l;++n)if(wa(m,i,j,n))return!1;return!0}function xa(a,b,c){I(a,b,0,c.x),I(a,b,1,c.y),
I(a,b,2,c.z)}function I(e,b,c,a){var d=e.e.copy(b.b).sub(b.c).floor(),g=e.o.copy(b.b).add(b.c).ceil(),h=b.b.getComponent(c),i=b.c.getComponent(c);if(a<0){for(var j=Math.floor(h-i+a)|0,n=Math.floor(h-i-1)|0;n>=j;--n)if(!V(e,c?d.x:n,c?g.x-1:n,c^1?d.y:n,c^1?g.y-1:n,c^2?d.z:n,c^2?g.z-1:n)){b.b.setComponent(c,(n+1|0)+i+.0001);return}}else if(a>0)for(var m=Math.ceil(h+i+a-1)|0,l=Math.ceil(h+i)|0;l<=m;++l)if(!V(e,c?d.x:l,c?g.x-1:l,c^1?d.y:l,c^1?g.y-1:l,c^2?d.z:l,c^2?g.z-1:l)){b.b.setComponent(c,l-i-.0001);return}b.b.setComponent(c,h+a)}function W(b,c,a,d,g,h){return b-=d,c-=g,a-=h,Math.sqrt(b*b+c*c+a*a)}function ya(b,c){var a=b+Da(c,57)|0;return a=a<<13^a,1-(Da(a,Da(Da(a,a),15731)+789221|0)+1376312589&2147483647)*(1/1073741824)}function X(b){return b*b*(3-b*2)}function za(b,c){for(var a=Math.floor(b)|0,d=Math.floor(c)|0,g=X(b-a),h=X(c-d),i=0,j=0;j<4;++j){var n=j&1,m=j>>1&1;i+=ya(a+n|0,d+m|0)*(n?g:1-g)*(m?h:1-h)}return i}function Aa(b,c){for(var a=0,d=1,g=0;g<3;++g)a+=za(b,c)*d,d*=.5,b*=2,c*=2;return a}function z(d,b,c){
var a=d[b];return a!==void 0?a:c}function Z(a){var b=[];for(var c in a)b.push(a[c]);return b}function ca(b){return b?b^3?0:1:-1}function da(b){return b^1?b^4?0:1:-1}function ea(b){return b^2?b^5?0:1:-1}function Ea(){this.b=new THREE.Vector3,this.c=new THREE.Scene,this.a=new THREE.PerspectiveCamera(75,1,.1,1000),this.d=new THREE.WebGLRenderer,this.g=this.h=null,this.i=new Ka,this.j=0,this.g=new La(this.c),this.h=new Ia(this.g),this.i.b.y=50,this.i.c.set(.4,.4,.4),this.a.rotation.order='YXZ',this.d.setClearColor(0,0),this.d.gammaInput=this.d.gammaOutput=!0}function Fa(b,c,a,d,g,h,i,j){this.b=b,this.c=c,this.a=a,this.d=d,this.g=g,this.h=h,this.i=i,this.j=j,this.n=new Uint8Array(32768),this.m=[null,null,null,null,null,null],this.l=new THREE.Box2,this.e=new THREE.Box2,this.o=this.f=null,this.q=this.k=null,this.p=this.r=null,this.t=null,this.w={},this.u=this.s=null,this.y=this.v=null,this.A=!1}function Ga(b,c){this.b=this.c=0,this.a=new THREE.Scene,this.d=new THREE.Scene,this.g=new THREE.Scene,this.h=this.i=null,this.j=this.n=null,
this.m=null,this.l=new THREE.Box2,this.e=new THREE.Box3,this.o=new THREE.Vector3,this.f=new THREE.Vector3,this.q=new THREE.Vector3,this.k=new THREE.Vector3,this.p=new THREE.OrthographicCamera(0,1,0,1,0,1),this.r=[],this.t=this.w=null,this.u=this.s=0,this.b=b,this.c=c,this.t=new THREE.WebGLRenderTarget(b<<1,c<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat}),this.t.texture.generateMipmaps=!1,this.w=new THREE.WebGLRenderTarget(b<<1,c<<1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat}),this.w.texture.generateMipmaps=!1,this.n=new THREE.WebGLRenderTarget(1024,1024,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBFormat}),this.n.texture.generateMipmaps=!1;var a=THREE.UniformsUtils.merge([THREE.UniformsLib.common]);this.h=new THREE.ShaderMaterial({uniforms:a,vertexShader:'\n        varying vec4 position_;\n\n        void main() {\n          position_ = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          gl_Position = position_;\n        }\n      ',
fragmentShader:'\n        varying vec4 position_;\n\n        void main() {\n          float depth = position_.z / position_.w * 0.5 + 0.5;\n          vec3 v = fract(depth * vec3(1.0, 256.0, 65536.0));\n          v = floor(v * 256.0) / 256.0;\n          gl_FragColor = vec4(v, 1.0);\n        }\n      '}),a=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{previous:{type:'t',value:null}},{rayLight:{type:'v3',value:new THREE.Vector3}},{accumulationFactor:{type:'f',value:.015625}}]),a.map.value=this.n,this.i=new THREE.ShaderMaterial({uniforms:a,vertexShader:'\n        attribute vec2 updateUV;\n        attribute vec3 updatePosition;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          updateUV_ = updateUV;\n          worldPosition = updatePosition;\n          clipPosition = projectionMatrix * modelViewMatrix * vec4(updatePosition, 1.0);\n          gl_Position = vec4(updateUV * 2.0 - 1.0, 0.0, 1.0);\n        }\n      ',
fragmentShader:'\n        uniform sampler2D map;\n        uniform sampler2D previous;\n        uniform float accumulationFactor;\n        uniform vec3 rayLight;\n        varying vec3 worldPosition;\n        varying vec4 clipPosition;\n        varying vec2 updateUV_;\n\n        void main() {\n          vec3 position = clipPosition.xyz / clipPosition.w * 0.5 + 0.5;\n          vec3 encoded = texture2D(map, position.xy).rgb;\n          float depth = dot(encoded, vec3(1.0, 1.0 / 256.0, 1.0 / 65536.0));\n          vec3 normal = cross(dFdx(worldPosition), dFdy(worldPosition));\n          float occlusion = float(depth + 1.0 / 256.0 < position.z || dot(rayLight, normal) < 0.0);\n\n          vec4 previous8 = texture2D(previous, updateUV_);\n          vec2 previous16 = vec2(\n            dot(previous8.rg, vec2(1.0, 1.0 / 256.0)),\n            dot(previous8.ba, vec2(1.0, 1.0 / 256.0)));\n          vec2 next16 = mix(previous16, vec2(occlusion, 1.0), accumulationFactor);\n          vec4 next8 = fract(vec4(next16.x * vec2(1.0, 256.0), next16.y * vec2(1.0, 256.0)));\n          next8 = floor(next8 * 256.0) / 256.0;\n          gl_FragColor = next8;\n        }\n      ',
derivatives:!0}),a=THREE.UniformsUtils.merge([THREE.UniformsLib.common]),this.j=new THREE.ShaderMaterial({uniforms:a,vertexShader:'\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      ',fragmentShader:'\n        void main() {\n          gl_FragColor = vec4(0.0);\n        }\n      '});var d=Da(b,c);this.m=new Int32Array(d);for(var g=0;g<d;++g)this.m[g]=(g+1|0)^d?g+1|0:-1}function Ia(b){this.b=this.c=null,this.a=new THREE.Vector4,this.d=new THREE.Vector3,this.g=new THREE.Matrix4,this.h=new THREE.Scene,this.i=new THREE.OrthographicCamera(0,1,0,1,0,1),this.j=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.n=!0,this.b=b;var c=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{cameraToWorldMatrix:{type:'m4',value:new THREE.Matrix4}},{clearColor:{type:'c',value:b.d}},{uvLight:{type:'v3',value:new THREE.Vector3}},{rayLight:{type:'v3',value:new THREE.Vector3}},{randomSeed:{type:'f',
value:0}},{godrayStrength:{type:'f',value:0}}]);c.map.value=this.j,this.j.texture.generateMipmaps=!1,this.c=new THREE.ShaderMaterial({uniforms:c,vertexShader:[THREE.ShaderChunk.uv_pars_vertex,'\n        uniform mat4 cameraToWorldMatrix;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        void main() {\n          vec4 projected = cameraToWorldMatrix * vec4(position.xy, 1.0, 1.0);\n          uv_ = uv;\n          ray_ = projected.xyz / projected.w;\n          gl_Position = vec4(position, 1.0);\n        }\n        '].join('\n'),fragmentShader:[THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.map_pars_fragment,'\n        uniform sampler2D map;\n        uniform float randomSeed;\n        uniform vec3 clearColor;\n        uniform vec3 rayLight;\n        uniform vec3 uvLight;\n        uniform float godrayStrength;\n        varying vec3 ray_;\n        varying vec2 uv_;\n\n        float lightMagnitude(vec3 ray) {\n          float falloff = max(0.0, dot(rayLight, normalize(ray)));\n          return pow(falloff, 4.0);\n        }\n\n        float godray() {\n          if (godrayStrength == 0.0) {\n            return 0.0;\n          }\n\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          vec3 deltaRayX = dFdx(ray_) / dFdx(uv_).x;\n          vec3 deltaRayY = dFdy(ray_) / dFdy(uv_).y;\n          const int count = 12;\n          float alpha = 0.0;\n\n          for (int i = 0; i < count; i++) {\n            float t = (float(i) + random) / float(count);\n            vec2 uv = mix(uv_, uvLight.xy, t * 0.5);\n            vec3 ray = ray_ +\n              deltaRayX * (uv.x - uv_.x) +\n              deltaRayY * (uv.y - uv_.y);\n            float magnitude = lightMagnitude(ray);\n\n            if (magnitude != 0.0) {\n              float occlusion = 1.0 - texture2D(map, uv).a;\n              float falloff = 1.0 - t;\n              alpha += occlusion * falloff;\n            }\n          }\n\n          // The integral of (1.0 - t) from 0 to 1 is 0.5\n          alpha *= 2.0;\n\n          return alpha * godrayStrength / float(count);\n        }\n\n        void main() {\n          vec4 color = texture2D(map, uv_);\n          vec3 backgroundColor = mix(clearColor, vec3(1.0), lightMagnitude(ray_));\n          color.rgb = mix(backgroundColor, color.rgb, color.a);\n          color.rgb += godray();\n          gl_FragColor = color;\n        }\n        '].join('\n'),
derivatives:!0}),this.h.add(new THREE.Mesh(new THREE.PlaneGeometry(2,2,1,1),this.c))}function Ja(b){this.b=this.c=null,this.a=null,this.d=[],this.g={},this.h=new THREE.Group,this.i=new THREE.Group,this.j=new THREE.Group,this.n=new THREE.Frustum,this.m=new THREE.Box3,this.l=new THREE.Matrix4,this.e=new THREE.Vector3,this.o=new THREE.Vector3,this.f=new Ga(1024,1024),this.q=96,this.k=60,this.b=b,this.c=new THREE.TextureLoader().load('terrain.png'),this.c.minFilter=this.c.magFilter=THREE.NearestFilter;var c=THREE.UniformsUtils.merge([THREE.UniformsLib.common,{map:{type:'t',value:null}},{lightmap:{type:'t',value:null}},{clearColor:{type:'c',value:b.d}},{drawDistance:{type:'f',value:0}},{randomSeed:{type:'f',value:0}},{renderTextureMap:{type:'i',value:!0}},{renderFog:{type:'i',value:!0}}]);c.map.value=this.c,c.lightmap.value=this.f.t,this.a=new THREE.ShaderMaterial({uniforms:c,vertexShader:'\n        attribute vec4 uvs;\n        varying vec3 position_;\n        varying vec4 uvs_;\n\n        void main() {\n          vec4 cameraSpacePosition = modelViewMatrix * vec4(position, 1.0);\n          position_ = cameraSpacePosition.xyz;\n          uvs_ = uvs;\n          gl_Position = projectionMatrix * cameraSpacePosition;\n        }\n      ',
fragmentShader:[THREE.ShaderChunk.common,'\n        uniform bool renderTextureMap;\n        uniform bool renderFog;\n        uniform sampler2D map;\n        uniform sampler2D lightmap;\n        uniform float randomSeed;\n        uniform vec3 clearColor;\n        uniform float drawDistance;\n        varying vec3 position_;\n        varying vec4 uvs_;\n\n        void main() {\n          vec4 sample = texture2D(lightmap, uvs_.zw);\n          float occlusion = 1.0 -\n            dot(sample.rg, vec2(1.0, 1.0 / 256.0)) /\n            dot(sample.ba, vec2(1.0, 1.0 / 256.0));\n          vec3 color = renderTextureMap ? inputToLinear(texture2D(map, uvs_.xy).rgb) * occlusion : vec3(occlusion);\n          vec3 normal = normalize(cross(dFdx(position_), dFdy(position_)));\n          if (renderFog) {\n            float fade = max(0.0, 1.0 - length(position_) / drawDistance);\n            color = mix(inputToLinear(clearColor), color, 1.0 - exp(fade * fade * -5.541263545158676));\n          }\n          color = linearToOutput(color);\n          float random = fract(sin(dot(gl_FragCoord.xy + randomSeed, vec2(12.9898, 78.233))) * 43758.5453);\n          color += (random - 0.5) / 255.0;\n          gl_FragColor = vec4(color, 1.0);\n        }\n        '].join('\n'),
derivatives:!0}),b.b.add(this.h),this.f.a.add(this.i),this.f.d.add(this.j),this.j.frustumCulled=!1}function Ka(){this.b=new THREE.Vector3,this.c=new THREE.Vector3}function La(b){this.b=this.c=null,this.a=new THREE.DirectionalLight(16777215,1),this.d=new THREE.Color(8372223),this.b=b,this.a.position.set(1,3,2),this.a.position.normalize(),b.add(this.a),this.c=new Ja(this)}var H=[[0,0,0],[2,2,2],[0,2,3],[1,1,1],[66,2,68],[6,6,5]];Ha()})();
