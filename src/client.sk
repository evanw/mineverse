if BUILD == .CLIENT {
  class Client :: ServerToClient {
    var _app = App.new
    var _host string
    var _socket dynamic
    var _isConnected = false
    var _encoder ClientToServerEncoder = null
    var _decoder ServerToClientDecoder = null

    def new {
      _encoder = ClientToServerEncoder.new(data => {
        if _socket != null && _isConnected {
          _socket.send(data)
        }
      })
      _decoder = ServerToClientDecoder.new(self)
      _bindEvents

      # Allow the IP to be configured by creating a file called "netconfig.txt" in the "www" folder with the ip:port to connect to
      fetch("netconfig.txt", data => {
        _host = "ws://" + (data ?? location.hostname + ":8080").trim() + "/"
        console.log("connecting to", _host)
        _createSocket
      })
    }

    def _createSocket {
      _socket = WebSocket.new(_host)

      _socket.onopen = => {
        if !_isConnected {
          _isConnected = true
          _handleNetworkConnect
        }
      }

      _socket.onmessage = e => {
        if _isConnected {
          _handleNetworkMessage(e.data)
        }
      }

      _socket.onclose = => {
        _socket = null
        if _isConnected {
          _isConnected = false
          _handleNetworkDisconnect
        }

        # If the socket is disconnected, periodically try to reconnect
        setTimeout(=> _createSocket, 250)
      }
    }

    def _bindEvents {
      var oldTime = 0.0
      var pressed = false
      var oldMouse dynamic = null
      var keys IntMap<bool> = {}
      var element = _app.element
      var blur = => {
        keys = {}
        pressed = false
      }
      var keydown = (e dynamic) => {
        keys[e.which] = true
        if e.which == 'F' { _app.toggleRenderFog }
      }
      var keyup = (e dynamic) => {
        keys[e.which] = false
      }
      var wheel = (e dynamic) => {
        if !e.ctrlKey {
          _app.rotateCamera(e.deltaX * -(Math.PI / 400), e.deltaY * -(Math.PI / 400)) # OS X trackpad
        }
        e.preventDefault()
      }
      var mousedown = (e dynamic) => {
        pressed = true
        e.preventDefault()
      }
      var mouseup = => {
        pressed = false
      }
      var mousemove = (e dynamic) => {
        if pressed {
          var deltaX = oldMouse != null ? e.pageX - oldMouse.pageX : 0
          var deltaY = oldMouse != null ? e.pageY - oldMouse.pageY : 0
          _app.rotateCamera(deltaX * (Math.PI / 400), deltaY * (Math.PI / 400))
        }
        oldMouse = e
      }
      var resize = => {
        var ratio = window.devicePixelRatio
        _app.resize(
          Math.round(window.innerWidth * ratio) as int,
          Math.round(window.innerHeight * ratio) as int)
      }
      var tick fn() = => {
        var newTime double = window.performance.now()
        var seconds = Math.min(0.25, (newTime - oldTime) / 1000)
        oldTime = newTime

        var player = _app.world.player
        player.setKeys(
          keys.get('A', false),
          keys.get('W', false),
          keys.get('D', false),
          keys.get('S', false),
          keys.get(SPACEBAR_KEY, false),
          keys.get(SHIFT_KEY, false))

        _app.tick(seconds)
        _encoder.handleUpdatePositionMessage(player.aabb.center.x, player.aabb.center.y, player.aabb.center.z)

        document.title = _app.title
        window.requestAnimationFrame(tick)
      }
      resize()
      tick()

      var instructions = document.createElement("div")
      var style = instructions.style
      style.position = "absolute"
      style.left = "20px"
      style.top = "20px"
      style.padding = "13px 15px"
      style.background = "rgba(0, 0, 0, 0.5)"
      style.color = "white"
      style.pointerEvents = "none"
      style.whiteSpace = "pre"
      style.font = "14px/20px sans-serif"
      style.borderRadius = "5px"
      instructions.textContent =
        "W/A/S/D: Move\n" +
        "Shift: Move fast\n" +
        "Drag: Rotate\n" +
        "F: Toggle fog"

      document.body.appendChild(element)
      document.body.appendChild(instructions)
      document.onkeydown = keydown
      document.onkeyup = keyup
      window.onblur = blur
      window.onresize = resize
      window.onmousedown = mousedown
      window.onmouseup = mouseup
      window.onmousemove = mousemove
      window.onwheel = wheel
    }

    def _handleNetworkConnect {
      console.log("connected to server")
    }

    def _handleNetworkMessage(data string) {
      _decoder.handleMessage(data)
    }

    def _handleNetworkDisconnect {
      console.log("disconnected from server")
    }

    def handleSelfConnectMessage(selfClientID int) {
      console.log("connected with id", selfClientID)
      _app.world.player.id = selfClientID
    }

    def handlePeerConnectMessage(peerClientID int) {
      console.log("other client", peerClientID, "connected")

      var player = Player.new(_app.world)
      player.id = peerClientID
      _app.world.add(player)
    }

    def handlePeerDisconnectMessage(peerClientID int) {
      console.log("other client", peerClientID, "disconnected")

      for entity in _app.world.entities {
        if entity is Player && (entity as Player).id == peerClientID {
          _app.world.remove(entity)
          break
        }
      }
    }

    def handlePeerUpdatePositionMessage(peerClientID int, x double, y double, z double) {
      console.log("other client", peerClientID, "moved to", x, y, z)

      for entity in _app.world.entities {
        if entity is Player && (entity as Player).id == peerClientID {
          (entity as Player).aabb.center.set(x, y, z)
        }
      }
    }
  }

  namespace Client {
    def fetch(url string, callback fn(string)) {
      var xhr = XMLHttpRequest.new
      xhr.onloadend = => callback(xhr.status == 200 ? xhr.responseText : null)
      xhr.open("GET", url)
      xhr.send
    }
  }

  namespace Client {
    const SHIFT_KEY = 16
    const SPACEBAR_KEY = 32
  }

  @entry
  def main {
    Client.new
  }
}
