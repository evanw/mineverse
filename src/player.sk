class Player : Entity {
  const aabb = AABB.new
  const _vector3 = THREE.Vector3.new()
  const _axisY = THREE.Vector3.new(0, 1, 0)
  var id = -1
  var _velocityY = 0.0
  var _left = false
  var _up = false
  var _right = false
  var _down = false
  var _jump = false
  var _speed = false
  var _mesh dynamic

  def new(world World) {
    super(world)

    aabb.center.y = 50
    aabb.radius.set(0.4, 0.8, 0.4)

    _mesh = THREE.Mesh.new(
      THREE.BoxGeometry.new(aabb.radius.x * 2, aabb.radius.y * 2, aabb.radius.z * 2),
      THREE.MeshBasicMaterial.new({
        "color": 0x00FF00,
      }))
    _world.scene.add(_mesh)
  }

  def setKeys(left bool, up bool, right bool, down bool, jump bool, speed bool) {
    _left = left
    _up = up
    _right = right
    _down = down
    _jump = jump
    _speed = speed
  }

  over dispose {
    _world.scene.remove(_mesh)
  }

  over tick(seconds double) {
    if self != _world.player {
      _mesh.position.copy(aabb.center)
      return
    }

    _vector3.set(0, 0, 0)

    var deltaX = (_right ? 1 : 0) - (_left ? 1 : 0)
    var deltaY = (_down ? 1 : 0) - (_up ? 1 : 0)

    if _speed {
      if deltaX != 0 || deltaY != 0 {
        _vector3.set(deltaX, 0, deltaY).normalize().multiplyScalar(20 * seconds)
        _vector3.applyEuler(_world.camera.rotation)
      }
      _velocityY = 0
    }

    else {
      if deltaX != 0 || deltaY != 0 {
        _vector3.set(deltaX, 0, deltaY).normalize().multiplyScalar(4 * seconds)
        _vector3.applyAxisAngle(_axisY, _world.camera.rotation.y)
      }
      _velocityY -= World.GRAVITY * seconds
      _vector3.y = _velocityY * seconds
    }

    _world.moveAABB(aabb, _vector3)
    _mesh.position.copy(aabb.center)

    var isOnCeiling = _world.terrain.isOnCeiling(aabb)
    var isOnFloor = _world.terrain.isOnFloor(aabb)

    if _jump && isOnFloor {
      _velocityY = 6
    } else if isOnCeiling || isOnFloor {
      _velocityY = 0
    }
  }
}
