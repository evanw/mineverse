enum Cell {
  EMPTY
  DIRT
  GRASS
  STONE
  SNOW
  METAL
}

enum Direction {
  XNEG
  YNEG
  ZNEG
  XPOS
  YPOS
  ZPOS

  def deltaX int {
    return self == XNEG ? -1 : self == XPOS ? 1 : 0
  }

  def deltaY int {
    return self == YNEG ? -1 : self == YPOS ? 1 : 0
  }

  def deltaZ int {
    return self == ZNEG ? -1 : self == ZPOS ? 1 : 0
  }

  def opposite Direction {
    return ((self + 3) % 6) as Direction
  }
}

enum Face {
  TOP
  BOTTOM
  SIDES
}

class Chunk {
  const _terrain Terrain
  const _group dynamic
  const _depthGroup dynamic
  const _updateGroup dynamic
  const _material dynamic
  const _startX int
  const _startY int
  const _startZ int
  const _data = Uint8Array.new(SIZE_X * SIZE_Y * SIZE_Z)
  const _neighbors List<Chunk> = [null, null, null, null, null, null]
  const _vertices = FloatArray.new
  const _uvs = FloatArray.new
  const _updateUVs = FloatArray.new
  const _updatePosition = FloatArray.new
  const _indices = IntArray.new
  const _quads = IntArray.new
  var _outerBox = THREE.Box2.new()
  var _innerBox = THREE.Box2.new()
  var _quadIndices IntMap<int> = null
  var _quadPreviousIndices IntMap<int> = {}
  var _geometry dynamic = null
  var _mesh dynamic = null
  var _depthMesh dynamic = null
  var _updateMesh dynamic = null
  var _isInvalid = false

  def destroy {
    _destroyMeshesAndGeometry

    # Unlink from neighbors
    for i in 0..6 {
      var neighbor = _neighbors[i]
      if neighbor != null {
        var opposite = (i as Direction).opposite
        assert(neighbor._neighbors[opposite] == self)
        neighbor._neighbors[opposite].invalidate
        neighbor._neighbors[opposite] = null
      }
    }

    # Free all quads
    if !_quads.isEmpty {
      for i in 0.._quads.count {
        _terrain.lightmap.free(_quads[i])
      }
      _quads.clear
    }

    _quadIndices = null
    _quadPreviousIndices = {}
  }

  def _destroyMeshesAndGeometry {
    if _mesh != null {
      _group.remove(_mesh)
      _mesh = null
    }

    if _depthMesh != null {
      _depthGroup.remove(_depthMesh)
      _depthMesh = null
    }

    if _updateMesh != null {
      _updateGroup.remove(_updateMesh)
      _updateMesh = null
    }

    if _geometry != null {
      _geometry.dispose()
      _geometry = null
    }
  }

  def key int {
    return Terrain.createKey(_startX, _startY, _startZ)
  }

  def startX double {
    return _startX
  }

  def startY double {
    return _startY
  }

  def startZ double {
    return _startZ
  }

  def data Uint8Array {
    return _data
  }

  def geometry Uint8Array {
    return _geometry
  }

  def isInvalid bool {
    return _isInvalid
  }

  def invalidate {
    _isInvalid = true
  }

  def neighbor(direction Direction) Chunk {
    return _neighbors[direction]
  }

  def contains(x int, y int, z int) bool {
    x -= _startX
    y -= _startY
    z -= _startZ
    return
      x >= 0 && x < SIZE_X &&
      y >= 0 && y < SIZE_Y &&
      z >= 0 && z < SIZE_Z
  }

  def linkTo(other Chunk, direction Direction) {
    assert(other._startX == _startX + direction.deltaX * SIZE_X)
    assert(other._startY == _startY + direction.deltaY * SIZE_Y)
    assert(other._startZ == _startZ + direction.deltaZ * SIZE_Z)

    assert(_neighbors[direction] == null)
    assert(other._neighbors[direction.opposite] == null)

    _neighbors[direction] = other
    other._neighbors[direction.opposite] = self

    invalidate
    other.invalidate
  }

  def get(x int, y int, z int) Cell {
    return contains(x, y, z) ? _getRelative(x - _startX, y - _startY, z - _startZ) : .EMPTY
  }

  def _getRelative(x int, y int, z int) Cell {
    assert(x >= 0 && x < SIZE_X)
    assert(y >= 0 && y < SIZE_Y)
    assert(z >= 0 && z < SIZE_Z)
    return _data[x + (y + z * SIZE_Y) * SIZE_X] as Cell
  }

  def set(x int, y int, z int, cell Cell) {
    if contains(x, y, z) {
      x -= _startX
      y -= _startY
      z -= _startZ
      _data[x + (y + z * SIZE_Y) * SIZE_X] = cell
      invalidate

      # Also invalidate neighboring chunks
      if x == 0 && neighbor(.XNEG) != null { neighbor(.XNEG).invalidate }
      if y == 0 && neighbor(.YNEG) != null { neighbor(.YNEG).invalidate }
      if z == 0 && neighbor(.ZNEG) != null { neighbor(.ZNEG).invalidate }
      if x == SIZE_X - 1 && neighbor(.XPOS) != null { neighbor(.XPOS).invalidate }
      if y == SIZE_Y - 1 && neighbor(.YPOS) != null { neighbor(.YPOS).invalidate }
      if z == SIZE_Z - 1 && neighbor(.ZPOS) != null { neighbor(.ZPOS).invalidate }
    }
  }

  def update {
    if !_isInvalid {
      return
    }

    _destroyMeshesAndGeometry
    _quads.clear
    _quadIndices = {}

    _generateGeometry

    # Free all unused quads
    for quad in _quadPreviousIndices.values {
      _terrain.lightmap.free(quad)
    }
    _quadPreviousIndices = _quadIndices
    _quadIndices = null

    # Upload the data to the GPU
    _geometry = THREE.BufferGeometry.new()
    _geometry.setIndex(THREE.Uint16Attribute(_indices.data, 1))
    _geometry.addAttribute("position", THREE.Float32Attribute(_vertices.data, 3))
    _geometry.addAttribute("uvs", THREE.Float32Attribute(_uvs.data, 4))
    _geometry.addAttribute("updateUV", THREE.Float32Attribute(_updateUVs.data, 2))
    _geometry.addAttribute("updatePosition", THREE.Float32Attribute(_updatePosition.data, 3))

    # Add the new mesh
    _mesh = THREE.Mesh.new(_geometry, _material)
    _depthMesh = THREE.Mesh.new(_geometry, _terrain.lightmap.depthMaterial)
    _updateMesh = THREE.Mesh.new(_geometry, _terrain.lightmap.updateMaterial)
    _group.add(_mesh)
    _depthGroup.add(_depthMesh)
    _updateGroup.add(_updateMesh)
    _updateMesh.frustumCulled = false

    # Reset state
    _vertices.clear
    _uvs.clear
    _updateUVs.clear
    _updatePosition.clear
    _indices.clear

    _isInvalid = false
  }

  def _generateGeometry {
    var textureIndex = TEXTURE_INDEX
    var quadBaseIndex = 0
    var startX = _startX
    var startY = _startY
    var startZ = _startZ

    for z in 0..SIZE_Z + 1 {
      for y in 0..SIZE_Y + 1 {
        for x in 0..SIZE_X + 1 {
          # Draw quads on the x axis
          if y < SIZE_Y && z < SIZE_Z {
            var neg = Cell.EMPTY
            var pos = Cell.EMPTY

            # -x
            if x > 0 {
              neg = _getRelative(x - 1, y, z)
            } else {
              var xneg = neighbor(.XNEG)
              if xneg != null {
                neg = xneg._getRelative(SIZE_X - 1, y, z)
              }
            }

            # +x
            if x < SIZE_X {
              pos = _getRelative(x, y, z)
            } else {
              var xpos = neighbor(.XPOS)
              if xpos != null {
                pos = xpos._getRelative(0, y, z)
              }
            }

            # Quad
            if neg == .EMPTY && pos != .EMPTY {
              _appendQuad(startX + x, startY + y + 1, startZ + z + 1, 0, 0, -1, 0, -1, 0, textureIndex[pos * 3 + Face.SIDES], quadBaseIndex)
            } else if neg != .EMPTY && pos == .EMPTY {
              _appendQuad(startX + x, startY + y + 1, startZ + z, 0, 0, 1, 0, -1, 0, textureIndex[neg * 3 + Face.SIDES], quadBaseIndex + 1)
            }
          }

          # Draw quads on the y axis
          if x < SIZE_X && z < SIZE_Z {
            var neg = Cell.EMPTY
            var pos = Cell.EMPTY

            # -y
            if y > 0 {
              neg = _getRelative(x, y - 1, z)
            } else {
              var yneg = neighbor(.YNEG)
              if yneg != null {
                neg = yneg._getRelative(x, SIZE_Y - 1, z)
              }
            }

            # +y
            if y < SIZE_Y {
              pos = _getRelative(x, y, z)
            } else {
              var ypos = neighbor(.YPOS)
              if ypos != null {
                pos = ypos._getRelative(x, 0, z)
              }
            }

            # Quad
            if neg == .EMPTY && pos != .EMPTY {
              _appendQuad(startX + x, startY + y, startZ + z, 1, 0, 0, 0, 0, 1, textureIndex[pos * 3 + Face.BOTTOM], quadBaseIndex + 2)
            } else if neg != .EMPTY && pos == .EMPTY {
              _appendQuad(startX + x + 1, startY + y, startZ + z, -1, 0, 0, 0, 0, 1, textureIndex[neg * 3 + Face.TOP], quadBaseIndex + 3)
            }
          }

          # Draw quads on the z axis
          if x < SIZE_X && y < SIZE_Y {
            var neg = Cell.EMPTY
            var pos = Cell.EMPTY

            # -z
            if z > 0 {
              neg = _getRelative(x, y, z - 1)
            } else {
              var zneg = neighbor(.ZNEG)
              if zneg != null {
                neg = zneg._getRelative(x, y, SIZE_Z - 1)
              }
            }

            # +z
            if z < SIZE_Z {
              pos = _getRelative(x, y, z)
            } else {
              var zpos = neighbor(.ZPOS)
              if zpos != null {
                pos = zpos._getRelative(x, y, 0)
              }
            }

            # Quad
            if neg == .EMPTY && pos != .EMPTY {
              _appendQuad(startX + x, startY + y + 1, startZ + z, 1, 0, 0, 0, -1, 0, textureIndex[pos * 3 + Face.SIDES], quadBaseIndex + 4)
            } else if neg != .EMPTY && pos == .EMPTY {
              _appendQuad(startX + x + 1, startY + y + 1, startZ + z, -1, 0, 0, 0, -1, 0, textureIndex[neg * 3 + Face.SIDES], quadBaseIndex + 5)
            }
          }

          quadBaseIndex += 6
        }
      }
    }
  }

  def _appendQuad(x int, y int, z int, ax int, ay int, az int, bx int, by int, bz int, textureIndex int, quadIndex int) {
    var cx = x + ax * 0.5 + bx * 0.5
    var cy = y + ay * 0.5 + by * 0.5
    var cz = z + az * 0.5 + bz * 0.5

    var s0 = (1 + textureIndex % 16) / 16.0 - 0.0001
    var t0 = 1 - (textureIndex / 16) / 16.0 - 0.0001
    var s1 = s0 - 1 / 16.0 + 0.0002
    var t1 = t0 - 1 / 16.0 + 0.0002

    var i = _vertices.count / 3
    _indices.append(i, i + 1, i + 2)
    _indices.append(i, i + 2, i + 3)

    # Reuse existing lightmap data if this isn't a new quad
    var index = _quadPreviousIndices.get(quadIndex, -1)
    if index == -1 {
      index = _terrain.lightmap.allocate
    } else {
      _quadPreviousIndices.remove(quadIndex)
    }
    var inner = _innerBox
    var outer = _outerBox
    _terrain.lightmap.innerQuadForIndex(index, inner)
    _terrain.lightmap.outerQuadForIndex(index, outer)
    _quads.append(index)
    _quadIndices[quadIndex] = index

    _appendVertex(x,           y,           z,           s0, t0, inner.min.x, inner.min.y, outer.min.x, outer.min.y, cx, cy, cz)
    _appendVertex(x + ax,      y + ay,      z + az,      s1, t0, inner.max.x, inner.min.y, outer.max.x, outer.min.y, cx, cy, cz)
    _appendVertex(x + ax + bx, y + ay + by, z + az + bz, s1, t1, inner.max.x, inner.max.y, outer.max.x, outer.max.y, cx, cy, cz)
    _appendVertex(x +      bx, y +      by, z +      bz, s0, t1, inner.min.x, inner.max.y, outer.min.x, outer.max.y, cx, cy, cz)
  }

  def quadCount int {
    return _quads != null ? _quads.count : 0
  }

  def _appendVertex(x int, y int, z int, s0 double, t0 double, s1 double, t1 double, s2 double, t2 double, cx double, cy double, cz double) {
    var expansion = Lightmap.CELL_SIZE / (Lightmap.CELL_SIZE - 1.0)
    _vertices.append(x, y, z)
    _uvs.append(s0, t0, s1, t1)
    _updateUVs.append(s2, t2)
    _updatePosition.append(cx + (x - cx) * expansion, cy + (y - cy) * expansion, cz + (z - cz) * expansion)
  }

  def generate {
    assert(_startX % SIZE_X == 0)
    assert(_startY % SIZE_Y == 0)
    assert(_startZ % SIZE_Z == 0)

    # Generate terrain
    for z in _startZ.._startZ + SIZE_Z {
      for x in _startX.._startX + SIZE_X {
        var bottom = 0
        var top = Math.round(SIZE_Y * 1.1 + SIZE_Y / 2 * Terrain.height(x * 0.02, z * 0.02)) as int
        var i = (x - _startX) + (z - _startZ) * SIZE_X * SIZE_Y

        for y in Math.max(bottom, _startY)..Math.min(top, _startY + SIZE_Y) {
          var cell Cell =
            y + 1 == top ? .GRASS :
            y < top - 3 ? .STONE :
            .DIRT
          data[i + (y - _startY) * SIZE_X] = cell
        }
      }
    }

    # Generate walkways
    if true {
      for level in 0..6 {
        var y = SIZE_Y * 2 - level * 10 - 1
        if y < _startY || y >= _startY + SIZE_Y {
          continue
        }
        for z in _startZ.._startZ + SIZE_Z {
          for x in _startX.._startX + SIZE_X {
            # Convert to barycentric coordinates
            var px = x * 0.01
            var py = z * 0.01
            py /= 0.866025404
            px -= 0.5 * py
            if (level & 1) != 0 {
              px -= 1.0 / 3.0
            }
            px -= Math.floor(px)
            py -= Math.floor(py)
            var pz = 1 - px - py
            if pz < 0 {
              px = 1 - px
              py = 1 - py
              pz = -pz
            }

            # Cut out hexagons
            var r = 2.0 / 3.0
            var t = 0.03
            var max = Math.max(Math.max(px, py), pz)
            var min = Math.min(Math.min(px, py), pz)
            if max > r + t || (max < r - t && min > t) {
              continue
            }
            data[(x - _startX) + ((y - _startY) + (z - _startZ) * SIZE_X) * SIZE_Y] = Cell.METAL
          }
        }
      }
    }

    invalidate
  }
}

namespace Chunk {
  const SHIFT_X = 5
  const SHIFT_Y = 5
  const SHIFT_Z = 5

  const SIZE_X = 1 << SHIFT_X
  const SIZE_Y = 1 << SHIFT_Y
  const SIZE_Z = 1 << SHIFT_Z

  const TEXTURE_INDEX = Uint8Array.new([
    0, 0, 0, # EMPTY
    2, 2, 2, # DIRT
    0, 2, 3, # GRASS
    1, 1, 1, # STONE
    66, 2, 68, # SNOW
    6, 6, 5, # METAL
  ])

  def _calcAO(side1 Cell, side2 Cell, corner Cell) double {
    if side1 != .EMPTY && side2 != .EMPTY { return 0.2 }
    if side1 != .EMPTY || side2 != .EMPTY || corner != .EMPTY { return 0.5 }
    return 1
  }
}
